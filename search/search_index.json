{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"#readmemd","text":"","title":"../../README.md"},{"location":"v5/how-to/authorization/","text":"Authorization Guards The packages responsible for restricting access to certain parts of the application are dot-rbac-guard and dot-rbac . These packages work together to create an infrastructure that is customizable and diversified to manage user access to the platform by specifying the type of role the user has. The authorization.global.php file provides multiple configurations specifying multiple roles as well as the types of permissions to which these roles have access. //example of a flat RBAC model that specifies two types of roles as well as their permission 'roles' =&gt; [ 'admin' =&gt; [ 'permissions' =&gt; [ 'authenticated', 'edit', 'delete', //etc.. ] ], 'user' =&gt; [ 'permissions' =&gt; [ 'authenticated', //etc.. ] ] ] The authorization-guards.global.php file provides configuration to restrict access to certain actions based on the permissions defined in authorization.global.php so basically we have to add the permissions in the dot-rbac configuration file first to specify the action restriction permissions. // configuration example to restrict certain actions of some routes based on the permissions specified in the dot-rbac configuration file 'rules' =&gt; [ [ 'route' =&gt; 'account', 'actions' =&gt; [//list of actions to apply , or empty array for all actions 'unregister', 'avatar', 'details', 'changePassword' ], 'permissions' =&gt; ['authenticated'] ], [ 'route' =&gt; 'admin', 'actions' =&gt; [ 'deleteAccount' ], 'permissions' =&gt; [ 'delete' //list of roles to allow ] ] ]","title":"Configure Authorizations"},{"location":"v5/how-to/authorization/#authorization-guards","text":"The packages responsible for restricting access to certain parts of the application are dot-rbac-guard and dot-rbac . These packages work together to create an infrastructure that is customizable and diversified to manage user access to the platform by specifying the type of role the user has. The authorization.global.php file provides multiple configurations specifying multiple roles as well as the types of permissions to which these roles have access. //example of a flat RBAC model that specifies two types of roles as well as their permission 'roles' =&gt; [ 'admin' =&gt; [ 'permissions' =&gt; [ 'authenticated', 'edit', 'delete', //etc.. ] ], 'user' =&gt; [ 'permissions' =&gt; [ 'authenticated', //etc.. ] ] ] The authorization-guards.global.php file provides configuration to restrict access to certain actions based on the permissions defined in authorization.global.php so basically we have to add the permissions in the dot-rbac configuration file first to specify the action restriction permissions. // configuration example to restrict certain actions of some routes based on the permissions specified in the dot-rbac configuration file 'rules' =&gt; [ [ 'route' =&gt; 'account', 'actions' =&gt; [//list of actions to apply , or empty array for all actions 'unregister', 'avatar', 'details', 'changePassword' ], 'permissions' =&gt; ['authenticated'] ], [ 'route' =&gt; 'admin', 'actions' =&gt; [ 'deleteAccount' ], 'permissions' =&gt; [ 'delete' //list of roles to allow ] ] ]","title":"Authorization Guards"},{"location":"v5/how-to/creating-fixtures/","text":"Fixtures Fixtures are used to seed the database with initial values and should only be executed ONCE each, after migrating the database. Seeding the database is done with the help of our custom package dotkernel/dot-data-fixtures built on top of doctrine/data-fixtures . See below on how to use our CLI command for listing and executing Doctrine data fixtures. Working with fixtures You can find an example of a fixtures class in data/doctrine/fixtures/AdminLoader.php . To list all the available fixtures by order of execution run: php bin/doctrine fixtures:list To execute all fixtures run: php bin/doctrine fixtures:execute To execute a specific fixture, use its class name, like in this example: php bin/doctrine fixtures:execute --class=AdminLoader Fixtures can and should be ordered to ensure database consistency. More on ordering fixtures can be found here : https://www.doctrine-project.org/projects/doctrine-data-fixtures/en/latest/how-to/fixture-ordering.html#fixture-ordering","title":"Create Database Fixtures"},{"location":"v5/how-to/creating-fixtures/#fixtures","text":"Fixtures are used to seed the database with initial values and should only be executed ONCE each, after migrating the database. Seeding the database is done with the help of our custom package dotkernel/dot-data-fixtures built on top of doctrine/data-fixtures . See below on how to use our CLI command for listing and executing Doctrine data fixtures.","title":"Fixtures"},{"location":"v5/how-to/creating-fixtures/#working-with-fixtures","text":"You can find an example of a fixtures class in data/doctrine/fixtures/AdminLoader.php . To list all the available fixtures by order of execution run: php bin/doctrine fixtures:list To execute all fixtures run: php bin/doctrine fixtures:execute To execute a specific fixture, use its class name, like in this example: php bin/doctrine fixtures:execute --class=AdminLoader Fixtures can and should be ordered to ensure database consistency. More on ordering fixtures can be found here : https://www.doctrine-project.org/projects/doctrine-data-fixtures/en/latest/how-to/fixture-ordering.html#fixture-ordering","title":"Working with fixtures"},{"location":"v5/how-to/creating-migrations/","text":"Creating migrations Migrations are used to create and/or edit the database structure. To generate a new migration file, use this command: php vendor/bin/doctrine-migrations migrations:generate It creates a PHP file like this one /data/doctrine/migrations/Version20240627134952.php that can then be edited in the IDE. You can add new queries in: public function up - these are executed when the migration is run. public function down - these are optional queries that undo the above changes. Example This example creates a new column named test . Add this in public function up : $this-&gt;addSql('ALTER TABLE admin ADD test VARCHAR(255) NOT NULL'); And its opposite in public function down : $this-&gt;addSql('ALTER TABLE admin DROP test');","title":"Create Database Migrations"},{"location":"v5/how-to/creating-migrations/#creating-migrations","text":"Migrations are used to create and/or edit the database structure. To generate a new migration file, use this command: php vendor/bin/doctrine-migrations migrations:generate It creates a PHP file like this one /data/doctrine/migrations/Version20240627134952.php that can then be edited in the IDE. You can add new queries in: public function up - these are executed when the migration is run. public function down - these are optional queries that undo the above changes.","title":"Creating migrations"},{"location":"v5/how-to/creating-migrations/#example","text":"This example creates a new column named test . Add this in public function up : $this-&gt;addSql('ALTER TABLE admin ADD test VARCHAR(255) NOT NULL'); And its opposite in public function down : $this-&gt;addSql('ALTER TABLE admin DROP test');","title":"Example"},{"location":"v5/how-to/csrf/","text":"CSRF protection in forms A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error. Implement CSRF protection Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper Create field Open the form's PHP class and append the following code to the method that initializes the fields (usually init ): $this-&gt;add(new \\Laminas\\Form\\Element\\Csrf('exampleCsrf', [ 'csrf_options' =&gt; [ 'timeout' =&gt; 3600, 'session' =&gt; new \\Laminas\\Session\\Container(), ], ])); where exampleCsrf should be a suggestive name that describes the purpose of the field (example: forgotPasswordCsrf ). Validate field Open the InputFilter that validates the form fields and append the following code to the method that initializes the fields (usually init ): $csrf = new \\Laminas\\InputFilter\\Input('exampleCsrf'); $csrf-&gt;setRequired(true); $csrf-&gt;getFilterChain() -&gt;attachByName(\\Laminas\\Filter\\StringTrim::class) -&gt;attachByName(\\Laminas\\Filter\\StripTags::class); $csrf-&gt;getValidatorChain() -&gt;attachByName(\\Laminas\\Validator\\NotEmpty::class, [ 'message' =&gt; '&lt;b&gt;CSRF&lt;/b&gt; is required and cannot be empty', ], true) -&gt;attachByName(\\Laminas\\Session\\Validator\\Csrf::class, [ 'name' =&gt; 'exampleCsrf', 'message' =&gt; '&lt;b&gt;CSRF&lt;/b&gt; is invalid', 'session' =&gt; new \\Laminas\\Session\\Container(), ], true); $this-&gt;add($csrf); where exampleCsrf must match the CSRF field's name in the form. Don't forget to modify both occurrences in this file. Make sure that you validate the form using its isValid method in the handler/controller where it is submitted. Render field Open the template that renders your form and add the following code somewhere between the form's opening and closing tags: {{ formElement(form.get('exampleCsrf')) }} Test the implementation Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: CSRF is required and cannot be empty Timeout Note the timeout option in your PHP form's exampleCsrf field, with its default value set to 3600 . This represents the value in seconds for how long the token is valid. Submitting a form that has been rendered for longer than this value will result in a validation error: CSRF is invalid You can modify the value of timeout in each form, but the default value should work in most cases.","title":"Set Up CSRF"},{"location":"v5/how-to/csrf/#csrf-protection-in-forms","text":"A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error.","title":"CSRF protection in forms"},{"location":"v5/how-to/csrf/#implement-csrf-protection","text":"Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper","title":"Implement CSRF protection"},{"location":"v5/how-to/csrf/#test-the-implementation","text":"Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: CSRF is required and cannot be empty","title":"Test the implementation"},{"location":"v5/how-to/dependency-injection/","text":"Dependency Injection Dependency injection is a design pattern used in software development to implement inversion of control. In simpler terms, it's the act of providing dependencies for an object during instantiation. In PHP, dependency injection can be implemented in various ways, including through constructor injection, setter injection and property injection. Dotkernel Admin, through its dot-dependency-injection package focuses only on constructor injection. Usage Dotkernel Admin comes out of the box with the dot-dependency-injection package, which provides all the functionality injecting dependencies into any object you want. dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Each dependency is specified as a separate parameter of the #[Inject] attribute. For our example we will inject AdminService and config dependencies into a AdminController . use Dot\\DependencyInjection\\Attribute\\Inject; class AdminController implements RequestHandlerInterface { #[Inject( AdminService::class, \"config\", )] public function __construct( protected AdminServiceInterface $adminService, protected array $config, ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: config.example The next step is to register the class in the ConfigProvider under factories using Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . public function getDependencies(): array { return [ 'factories' =&gt; [ AdminController::class =&gt; AttributedServiceFactory::class ] ]; } That's it. When your object is instantiated from the container, it will automatically have its dependencies resolved. Dependencies injection is available to any object within Dotkernel Admin. For example, you can inject dependencies in a service, a controller and so on, simply by registering them in the ConfigProvider .","title":"Inject Dependencies"},{"location":"v5/how-to/dependency-injection/#dependency-injection","text":"Dependency injection is a design pattern used in software development to implement inversion of control. In simpler terms, it's the act of providing dependencies for an object during instantiation. In PHP, dependency injection can be implemented in various ways, including through constructor injection, setter injection and property injection. Dotkernel Admin, through its dot-dependency-injection package focuses only on constructor injection.","title":"Dependency Injection"},{"location":"v5/how-to/dependency-injection/#usage","text":"Dotkernel Admin comes out of the box with the dot-dependency-injection package, which provides all the functionality injecting dependencies into any object you want. dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Each dependency is specified as a separate parameter of the #[Inject] attribute. For our example we will inject AdminService and config dependencies into a AdminController . use Dot\\DependencyInjection\\Attribute\\Inject; class AdminController implements RequestHandlerInterface { #[Inject( AdminService::class, \"config\", )] public function __construct( protected AdminServiceInterface $adminService, protected array $config, ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: config.example The next step is to register the class in the ConfigProvider under factories using Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . public function getDependencies(): array { return [ 'factories' =&gt; [ AdminController::class =&gt; AttributedServiceFactory::class ] ]; } That's it. When your object is instantiated from the container, it will automatically have its dependencies resolved. Dependencies injection is available to any object within Dotkernel Admin. For example, you can inject dependencies in a service, a controller and so on, simply by registering them in the ConfigProvider .","title":"Usage"},{"location":"v5/how-to/npm_commands/","text":"NPM Commands To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. The recommended way to install npm is through Node Version Manager . The watch command compiles the components then monitors the files for changes and recompiles them. npm run watch After all updates are done, this command compiles the assets locally, minifies them and makes them ready for production. npm run prod","title":"Use NPM Commands"},{"location":"v5/how-to/npm_commands/#npm-commands","text":"To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. The recommended way to install npm is through Node Version Manager . The watch command compiles the components then monitors the files for changes and recompiles them. npm run watch After all updates are done, this command compiles the assets locally, minifies them and makes them ready for production. npm run prod","title":"NPM Commands"},{"location":"v5/installation/composer/","text":"Composer Installation of Packages Composer is required to install Dotkernel Admin. You can install Composer from the official site . First make sure that you have navigated your command prompt to the folder where you copied the files in the previous step. Install dependencies Run this command in the command prompt. Use the CLI in order to ensure interactivity for proper configuration. composer install You should see this text below, along with a long list of packages to be installed instead of the [...] . In this example there are 171 packages, though the number can change in future updates. You will find the packages in the vendor folder. No composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https://getcomposer.org/install for more information. Loading composer repositories with package information Updating dependencies Lock file operations: 171 installs, 0 updates, 0 removals [...] Writing lock file Installing dependencies from lock file (including require-dev) Package operations: 171 installs, 0 updates, 0 removals [...] The setup script prompts for some configuration settings, for example the lines below: Please select which config file you wish to inject 'Laminas\\Validator\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Type 0 to select [0] Do not inject . We choose 0 because Dotkernel includes its own ConfigProvider which already contains the prompted configurations. If you choose [1] config/config.php , an extra ConfigProvider will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter to complete this stage. Development mode If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Composer"},{"location":"v5/installation/composer/#composer-installation-of-packages","text":"Composer is required to install Dotkernel Admin. You can install Composer from the official site . First make sure that you have navigated your command prompt to the folder where you copied the files in the previous step.","title":"Composer Installation of Packages"},{"location":"v5/installation/composer/#install-dependencies","text":"Run this command in the command prompt. Use the CLI in order to ensure interactivity for proper configuration. composer install You should see this text below, along with a long list of packages to be installed instead of the [...] . In this example there are 171 packages, though the number can change in future updates. You will find the packages in the vendor folder. No composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https://getcomposer.org/install for more information. Loading composer repositories with package information Updating dependencies Lock file operations: 171 installs, 0 updates, 0 removals [...] Writing lock file Installing dependencies from lock file (including require-dev) Package operations: 171 installs, 0 updates, 0 removals [...] The setup script prompts for some configuration settings, for example the lines below: Please select which config file you wish to inject 'Laminas\\Validator\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Type 0 to select [0] Do not inject . We choose 0 because Dotkernel includes its own ConfigProvider which already contains the prompted configurations. If you choose [1] config/config.php , an extra ConfigProvider will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter to complete this stage.","title":"Install dependencies"},{"location":"v5/installation/composer/#development-mode","text":"If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Development mode"},{"location":"v5/installation/configuration-files/","text":"Configuration Files Prepare config files duplicate config/autoload/local.php.dist as config/autoload/local.php duplicate config/autoload/mail.local.php.dist as config/autoload/mail.local.php If you intend to send emails from your Frontend, make sure to fill in SMTP connection params. This will be covered in the next section. optional : in order to run/create tests, duplicate config/autoload/local.test.php.dist as config/autoload/local.test.php this creates a new in-memory database that your tests will run on. Mail If you want your application to send mail, add valid credentials to the following keys in config/autoload/mail.local.php Under message_options key: from - email address that will send emails (required) from_name - organization name for signing sent emails (optional) Under smtp_options key: host - hostname or IP address of the mail server (required) connection_config - add the username and password keys (required) In config/autoload/local.php edit the key contact =&gt; message_receivers =&gt; to with string values for emails that should receive contact messages. Please add at least 1 email address in order for contact message to reach someone Also feel free to add as many CCs as you require under the contact =&gt; message_receivers =&gt; cc key.","title":"Configuration Files"},{"location":"v5/installation/configuration-files/#configuration-files","text":"","title":"Configuration Files"},{"location":"v5/installation/configuration-files/#prepare-config-files","text":"duplicate config/autoload/local.php.dist as config/autoload/local.php duplicate config/autoload/mail.local.php.dist as config/autoload/mail.local.php If you intend to send emails from your Frontend, make sure to fill in SMTP connection params. This will be covered in the next section. optional : in order to run/create tests, duplicate config/autoload/local.test.php.dist as config/autoload/local.test.php this creates a new in-memory database that your tests will run on.","title":"Prepare config files"},{"location":"v5/installation/configuration-files/#mail","text":"If you want your application to send mail, add valid credentials to the following keys in config/autoload/mail.local.php Under message_options key: from - email address that will send emails (required) from_name - organization name for signing sent emails (optional) Under smtp_options key: host - hostname or IP address of the mail server (required) connection_config - add the username and password keys (required) In config/autoload/local.php edit the key contact =&gt; message_receivers =&gt; to with string values for emails that should receive contact messages. Please add at least 1 email address in order for contact message to reach someone Also feel free to add as many CCs as you require under the contact =&gt; message_receivers =&gt; cc key.","title":"Mail"},{"location":"v5/installation/doctrine-orm/","text":"Doctrine ORM This step saves the database connection credentials in an Admin configuration file. We do not cover the creation steps of the database itself. Setup database Create a new MySQL database and set its collation to utf8mb4_general_ci . Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Below is the item you need to focus on. my_database , my_user , my_password are provided only as an example. $databases = [ 'default' =&gt; [ 'host' =&gt; 'localhost', 'dbname' =&gt; 'my_database', 'user' =&gt; 'my_user', 'password' =&gt; 'my_password', 'port' =&gt; 3306, 'driver' =&gt; 'pdo_mysql', 'charset' =&gt; 'utf8mb4', 'collate' =&gt; 'utf8mb4_general_ci', ], // you can add more database connections into this array ]; Running migrations Run the database migrations by using the following command: php vendor/bin/doctrine-migrations migrate Note: If you have already run the migrations, you may get this message. You should double-check to make sure the new migrations are ok to run. WARNING! You have x previously executed migrations in the database that are not registered migrations. {migration list} Are you sure you wish to continue? (y/n) When using an empty database, you will get this confirmation message instead. WARNING! You are about to execute a database migration that could result in schema changes and data loss. Are you sure you wish to continue? (y/n) Again, submit y to run all the migrations in chronological order. Each migration will be logged in the migrations table to prevent running the same migration more than once, which is often not desirable. If everything ran correctly, you will get this confirmation. [OK] Successfully migrated to version: Admin\\Migrations\\Version20240627134952 The migration name Version20240627134952 may differ in future Admin updates. Fixtures Run this command to populate the admin tables with the default values: php bin/doctrine fixtures:execute You should see our galloping horse in the command line. Executing Admin\\Fixtures\\AdminRoleLoader Executing Admin\\Fixtures\\AdminLoader Fixtures have been loaded. .'' ._.-.___.' (`\\ //( ( `' '/ )\\ ).__. ) ' &lt;' `\\ ._/'\\ ` \\ \\","title":"Doctrine ORM"},{"location":"v5/installation/doctrine-orm/#doctrine-orm","text":"This step saves the database connection credentials in an Admin configuration file. We do not cover the creation steps of the database itself.","title":"Doctrine ORM"},{"location":"v5/installation/doctrine-orm/#setup-database","text":"Create a new MySQL database and set its collation to utf8mb4_general_ci . Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Below is the item you need to focus on. my_database , my_user , my_password are provided only as an example. $databases = [ 'default' =&gt; [ 'host' =&gt; 'localhost', 'dbname' =&gt; 'my_database', 'user' =&gt; 'my_user', 'password' =&gt; 'my_password', 'port' =&gt; 3306, 'driver' =&gt; 'pdo_mysql', 'charset' =&gt; 'utf8mb4', 'collate' =&gt; 'utf8mb4_general_ci', ], // you can add more database connections into this array ];","title":"Setup database"},{"location":"v5/installation/doctrine-orm/#running-migrations","text":"Run the database migrations by using the following command: php vendor/bin/doctrine-migrations migrate Note: If you have already run the migrations, you may get this message. You should double-check to make sure the new migrations are ok to run. WARNING! You have x previously executed migrations in the database that are not registered migrations. {migration list} Are you sure you wish to continue? (y/n) When using an empty database, you will get this confirmation message instead. WARNING! You are about to execute a database migration that could result in schema changes and data loss. Are you sure you wish to continue? (y/n) Again, submit y to run all the migrations in chronological order. Each migration will be logged in the migrations table to prevent running the same migration more than once, which is often not desirable. If everything ran correctly, you will get this confirmation. [OK] Successfully migrated to version: Admin\\Migrations\\Version20240627134952 The migration name Version20240627134952 may differ in future Admin updates.","title":"Running migrations"},{"location":"v5/installation/doctrine-orm/#fixtures","text":"Run this command to populate the admin tables with the default values: php bin/doctrine fixtures:execute You should see our galloping horse in the command line. Executing Admin\\Fixtures\\AdminRoleLoader Executing Admin\\Fixtures\\AdminLoader Fixtures have been loaded. .'' ._.-.___.' (`\\ //( ( `' '/ )\\ ).__. ) ' &lt;' `\\ ._/'\\ ` \\ \\","title":"Fixtures"},{"location":"v5/installation/getting-started/","text":"Clone the project Recommended development environment If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WLS2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/admin.git . If everything ran correctly, you can expect to see an output like this, though the numbers may differ. Cloning into '.'... remote: Enumerating objects: 6538, done. remote: Counting objects: 100% (1652/1652), done. remote: Compressing objects: 100% (785/785), done. remote: Total 6538 (delta 804), reused 1417 (delta 748), pack-reused 4886 (from 1) Receiving objects: 100% (6538/6538), 11.84 MiB | 16.52 MiB/s, done. Resolving deltas: 100% (3359/3359), done. You can already open the project in your preferred IDE to double-check the files were copied correctly.","title":"Getting Started"},{"location":"v5/installation/getting-started/#clone-the-project","text":"","title":"Clone the project"},{"location":"v5/installation/getting-started/#recommended-development-environment","text":"If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WLS2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/admin.git . If everything ran correctly, you can expect to see an output like this, though the numbers may differ. Cloning into '.'... remote: Enumerating objects: 6538, done. remote: Counting objects: 100% (1652/1652), done. remote: Compressing objects: 100% (785/785), done. remote: Total 6538 (delta 804), reused 1417 (delta 748), pack-reused 4886 (from 1) Receiving objects: 100% (6538/6538), 11.84 MiB | 16.52 MiB/s, done. Resolving deltas: 100% (3359/3359), done. You can already open the project in your preferred IDE to double-check the files were copied correctly.","title":"Recommended development environment"},{"location":"v5/installation/installation-intro/","text":"Introduction In this tutorial, we will install Dotkernel Admin from scratch. We will focus on these tasks: Highlight 3rd party tools required for the installation. Provide all the relevant commands with expected responses. Configure the development environment. Run the project. By the end of this tutorial you will have a fully-functional Dotkernel Admin on your selected environment and can begin coding.","title":"Introduction"},{"location":"v5/installation/installation-intro/#introduction","text":"In this tutorial, we will install Dotkernel Admin from scratch. We will focus on these tasks: Highlight 3rd party tools required for the installation. Provide all the relevant commands with expected responses. Configure the development environment. Run the project. By the end of this tutorial you will have a fully-functional Dotkernel Admin on your selected environment and can begin coding.","title":"Introduction"},{"location":"v5/installation/manage-geolite2/","text":"Manage the GeoLite2 databases You can download/update a specific GeoLite2 database, by running the following command where {DATABASE} can be asn , city , country : php bin/cli.php geoip:synchronize -d {DATABASE} You can download/update all GeoLite2 databases at once, by running the following command: php bin/cli.php geoip:synchronize The output should be similar to the below, displaying per row: database identifier : previous build datetime -&gt; current build datetime . asn: n/a -&gt; 2024-11-01 02:29:44 city: n/a -&gt; 2024-11-01 02:29:31 country: n/a -&gt; 2024-11-01 02:25:09 n/a will be replaced by the older version of the GeoLite2 databases when you run the command again. Get help for this command by running: php bin/cli.php help geoip:synchronize Tip : If you set up the synchronizer command as a cronjob, you can add the -q|--quiet option, and it will output data only if an error has occurred.","title":"Manage Geolite2"},{"location":"v5/installation/manage-geolite2/#manage-the-geolite2-databases","text":"You can download/update a specific GeoLite2 database, by running the following command where {DATABASE} can be asn , city , country : php bin/cli.php geoip:synchronize -d {DATABASE} You can download/update all GeoLite2 databases at once, by running the following command: php bin/cli.php geoip:synchronize The output should be similar to the below, displaying per row: database identifier : previous build datetime -&gt; current build datetime . asn: n/a -&gt; 2024-11-01 02:29:44 city: n/a -&gt; 2024-11-01 02:29:31 country: n/a -&gt; 2024-11-01 02:25:09 n/a will be replaced by the older version of the GeoLite2 databases when you run the command again. Get help for this command by running: php bin/cli.php help geoip:synchronize Tip : If you set up the synchronizer command as a cronjob, you can add the -q|--quiet option, and it will output data only if an error has occurred.","title":"Manage the GeoLite2 databases"},{"location":"v5/installation/test-the-installation/","text":"Running the application Do not enable dev mode in production We recommend running your applications in WSL: Make sure you have WSL installed on your system. Currently we provide a distro implementations for AlmaLinux9 . Install the application in a virtualhost as recommended by the chosen distro. Set $baseUrl in config/autoload/local.php to the address of the virtualhost. Run the application by opening the virtualhost address in your browser. You should see the Dotkernel admin login page. If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php If you ran the fixtures you will have an admin user in the database with the following credentials: User : admin Password : dotadmin Production only : Make sure you modify the default admin credentials. Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: # other code return [ # other configurations... 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ], ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Test the Installation"},{"location":"v5/installation/test-the-installation/#running-the-application","text":"Do not enable dev mode in production We recommend running your applications in WSL: Make sure you have WSL installed on your system. Currently we provide a distro implementations for AlmaLinux9 . Install the application in a virtualhost as recommended by the chosen distro. Set $baseUrl in config/autoload/local.php to the address of the virtualhost. Run the application by opening the virtualhost address in your browser. You should see the Dotkernel admin login page. If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php If you ran the fixtures you will have an admin user in the database with the following credentials: User : admin Password : dotadmin Production only : Make sure you modify the default admin credentials. Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: # other code return [ # other configurations... 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ], ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Running the application"},{"location":"v5/introduction/file-structure/","text":"File structure Dotkernel Admin follows the PSR-4 standards. It is considered good practice to standardize the file structure of projects. When using Dotkernel Admin the following structure is installed by default: Special purpose folders .github - Contains GitHub workflow files .laminas-ci - Contains laminas-ci workflow files bin folder This folder contents are clear-config-cache.php - Removes the config cache file data/cache/config-cache.php ; available only when development mode is enabled cli.php - Used to build console applications based on laminas-cli doctrine - Used by the doctrine fixtures to populate the database tables config folder This folder contains all application-related config files: cli-config.php - Command line interface configuration used by migrations, fixtures, crons config.php - Registers ConfigProviders for installing packages container.php - Main service container that provides access to all registered services development.config.php.dist - Activates debug mode; gets symlinked as development.config.php when enabling development mode migrations.php - Configuration for database migration, like migration file location and table to save the migration log pipeline.php - Contains a list of middlewares, in the order of their execution twig-cs-fixer.php - Configuration file for Twig code style checker/fixer config/autoload folder This folder contains all service-related local and global config files: app.global.php - Configures basic app variables authentication.global.php - Defines the Admin identity authorization.global.php - Configures permissions for user roles authorization-guards.global.php - Configures access per route for user roles cli.global.php - Configures cli cors.global.php - Configures Cross-Origin Resource Sharing, like call origin, headers, cookies dependencies.global.php - Config file to set global dependencies that should be accessible by all modules development.local.php.dist - Gets symlinked as development.local.php when enabling development mode; activates error handlers doctrine.global.php - Configuration used by Object–relational mapping error-handling.global.php - Configures and activates error logs local.php.dist - Local config file where you can overwrite application name and URL local.test.php.dist - Local configuration for functional tests mail.local.php.dist - Mail configuration; e.g. sendmail vs smtp, message configuration, mail logging mezzio.global.php - Mezzio core config file navigation.global.php - Configures the top menu session.global.php - Configures the session templates.global.php - dotkernel/dot-twigrenderer config file data folder This folder is a storage for project data files and service caches. It contains these folders: cache - Cache for e.g. Twig files doctrine - Database migrations and fixtures geoip - Holds the GeoLite2 databases lock - Contains lock files generated by dotkernel/dot-cli AVOID storing sensitive data on the repository! log folder This folder stores daily log files. When you access the application from the browser, (if not already created) a new log file gets created in the format specified in the config/autoload/error-handling.global.php config file under the stream array key. public folder This folder contains all publicly available assets and serves as the entry point of the application: css and js - Contains the css and js file(s) generated by the webpack (npm) from the assets folder fonts and images - Contain the font and image file(s) copied by the webpack (npm) from the assets folder uploads - a folder that normally contains admin avatar images .htaccess - server configuration file used by Apache web server; it enables the URL rewrite functionality index.php - the application's main entry point robots.txt.dist - a sample robots.txt file that allows/denies bot access to certain areas of your application; activate it by duplicating the file as robots.txt and comment out the lines that don't match your environment src folder This folder contains a separate folder for each Module. These are the modules included by default: Admin - Contains functionality for managing users with admin role; note these are users save in the admin database table App - Contains core functionality, from authentication, to rendering, to error reporting Setting - Contains functionality for saving and reading display settings Module contents Each Module folder, in turn, should contain the following folders, unless they are empty: src/Controller - Action classes src/Entity - Used by database entities src/Repository - Entity repository folder src/Service - Service classes The above example is just some of the folders a project may include, but they should give you an idea about the recommended structure. Other classes the src folder may include are InputFilter , EventListener , Helper , Command , Factory etc. The src folder in each Module folder normally also contains these files: ConfigProvider.php - Configuration data for the module OpenAPI.php - Detailed descriptions for each endpoint in the OpenAPI format RoutesDelegator.php - Module specific route registrations templates folder for modules This folder contains the template files, used for example to help render e-mail templates. twig is used as Templating Engine. All template files have the extension .html.twig .","title":"File Structure"},{"location":"v5/introduction/file-structure/#file-structure","text":"Dotkernel Admin follows the PSR-4 standards. It is considered good practice to standardize the file structure of projects. When using Dotkernel Admin the following structure is installed by default:","title":"File structure"},{"location":"v5/introduction/file-structure/#special-purpose-folders","text":".github - Contains GitHub workflow files .laminas-ci - Contains laminas-ci workflow files","title":"Special purpose folders"},{"location":"v5/introduction/file-structure/#bin-folder","text":"This folder contents are clear-config-cache.php - Removes the config cache file data/cache/config-cache.php ; available only when development mode is enabled cli.php - Used to build console applications based on laminas-cli doctrine - Used by the doctrine fixtures to populate the database tables","title":"bin folder"},{"location":"v5/introduction/file-structure/#config-folder","text":"This folder contains all application-related config files: cli-config.php - Command line interface configuration used by migrations, fixtures, crons config.php - Registers ConfigProviders for installing packages container.php - Main service container that provides access to all registered services development.config.php.dist - Activates debug mode; gets symlinked as development.config.php when enabling development mode migrations.php - Configuration for database migration, like migration file location and table to save the migration log pipeline.php - Contains a list of middlewares, in the order of their execution twig-cs-fixer.php - Configuration file for Twig code style checker/fixer","title":"config folder"},{"location":"v5/introduction/file-structure/#data-folder","text":"This folder is a storage for project data files and service caches. It contains these folders: cache - Cache for e.g. Twig files doctrine - Database migrations and fixtures geoip - Holds the GeoLite2 databases lock - Contains lock files generated by dotkernel/dot-cli AVOID storing sensitive data on the repository!","title":"data folder"},{"location":"v5/introduction/file-structure/#log-folder","text":"This folder stores daily log files. When you access the application from the browser, (if not already created) a new log file gets created in the format specified in the config/autoload/error-handling.global.php config file under the stream array key.","title":"log folder"},{"location":"v5/introduction/file-structure/#public-folder","text":"This folder contains all publicly available assets and serves as the entry point of the application: css and js - Contains the css and js file(s) generated by the webpack (npm) from the assets folder fonts and images - Contain the font and image file(s) copied by the webpack (npm) from the assets folder uploads - a folder that normally contains admin avatar images .htaccess - server configuration file used by Apache web server; it enables the URL rewrite functionality index.php - the application's main entry point robots.txt.dist - a sample robots.txt file that allows/denies bot access to certain areas of your application; activate it by duplicating the file as robots.txt and comment out the lines that don't match your environment","title":"public folder"},{"location":"v5/introduction/file-structure/#src-folder","text":"This folder contains a separate folder for each Module. These are the modules included by default: Admin - Contains functionality for managing users with admin role; note these are users save in the admin database table App - Contains core functionality, from authentication, to rendering, to error reporting Setting - Contains functionality for saving and reading display settings","title":"src folder"},{"location":"v5/introduction/introduction/","text":"Introduction Dotkernel Admin is an application (skeleton) intended for quickly setting up an administration site for your platform. It's a fast and reliable way to manage records in your database with a simple table-based approach, and also to build reports and graphs to monitor your platform. The many graphical components at your disposal ensure an intuitive user experience. Check out our demo . Submit user admin and password dotadmin to authenticate yourself.","title":"Introduction"},{"location":"v5/introduction/introduction/#introduction","text":"Dotkernel Admin is an application (skeleton) intended for quickly setting up an administration site for your platform. It's a fast and reliable way to manage records in your database with a simple table-based approach, and also to build reports and graphs to monitor your platform. The many graphical components at your disposal ensure an intuitive user experience. Check out our demo . Submit user admin and password dotadmin to authenticate yourself.","title":"Introduction"},{"location":"v5/introduction/packages/","text":"Packages dotkernel/dot-cache - Provides caching based on symfony/cache dotkernel/dot-cli - Build console applications based on laminas-cli dotkernel/dot-controller - Provides base classes for action based controllers similar to Laminas controller component dotkernel/dot-data-fixtures - Provides a CLI interface for listing &amp; executing doctrine data fixtures dotkernel/dot-dependency-injection - Dependency injection component using class attributes dotkernel/dot-errorhandler - Logging Error Handler for Middleware Applications dotkernel/dot-flashmessenger - Provides session messages between redirects dotkernel/dot-geoip - Retrieve information about an IP address based on maxmind/GeoIP2-php dotkernel/dot-helpers - Helper/Utility classes based on mezzio/mezzio-helpers dotkernel/dot-mail - Mail component based on laminas-mail dotkernel/dot-navigation - Allows you to easily define and parse menus inside templates, configuration based approach dotkernel/dot-rbac-guard - Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria dotkernel/dot-session - Dotkernel session component extending and customizing laminas-session dotkernel/dot-twigrenderer - Dotkernel component providing twig extensions and customizations friendsofphp/proxy-manager-lts - Fork of ocramius/proxy-manager laminas/laminas-component-installer - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator - Lightweight library for collecting and merging configuration from different sources laminas/laminas-i18n - Complete translation suite laminas/laminas-math - Create cryptographically secure pseudo-random numbers and manage big integers mezzio/mezzio - PSR-15 Middleware Microframework mezzio/mezzio-authorization-rbac - mezzio authorization rbac adapter for laminas/laminas-permissions-rbac mezzio/mezzio-cors - CORS component for Mezzio and other PSR-15 middleware runners mezzio/mezzio-fastroute - FastRoute integration for Mezzio ramsey/uuid-doctrine - Use ramsey/uuid as a Doctrine field type roave/psr-container-doctrine - Doctrine Factories for PSR-11 Containers","title":"Packages"},{"location":"v5/introduction/packages/#packages","text":"dotkernel/dot-cache - Provides caching based on symfony/cache dotkernel/dot-cli - Build console applications based on laminas-cli dotkernel/dot-controller - Provides base classes for action based controllers similar to Laminas controller component dotkernel/dot-data-fixtures - Provides a CLI interface for listing &amp; executing doctrine data fixtures dotkernel/dot-dependency-injection - Dependency injection component using class attributes dotkernel/dot-errorhandler - Logging Error Handler for Middleware Applications dotkernel/dot-flashmessenger - Provides session messages between redirects dotkernel/dot-geoip - Retrieve information about an IP address based on maxmind/GeoIP2-php dotkernel/dot-helpers - Helper/Utility classes based on mezzio/mezzio-helpers dotkernel/dot-mail - Mail component based on laminas-mail dotkernel/dot-navigation - Allows you to easily define and parse menus inside templates, configuration based approach dotkernel/dot-rbac-guard - Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria dotkernel/dot-session - Dotkernel session component extending and customizing laminas-session dotkernel/dot-twigrenderer - Dotkernel component providing twig extensions and customizations friendsofphp/proxy-manager-lts - Fork of ocramius/proxy-manager laminas/laminas-component-installer - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator - Lightweight library for collecting and merging configuration from different sources laminas/laminas-i18n - Complete translation suite laminas/laminas-math - Create cryptographically secure pseudo-random numbers and manage big integers mezzio/mezzio - PSR-15 Middleware Microframework mezzio/mezzio-authorization-rbac - mezzio authorization rbac adapter for laminas/laminas-permissions-rbac mezzio/mezzio-cors - CORS component for Mezzio and other PSR-15 middleware runners mezzio/mezzio-fastroute - FastRoute integration for Mezzio ramsey/uuid-doctrine - Use ramsey/uuid as a Doctrine field type roave/psr-container-doctrine - Doctrine Factories for PSR-11 Containers","title":"Packages"},{"location":"v5/introduction/server-requirements/","text":"Server Requirements For production, we highly recommend a *nix based system. Webserver Apache &gt;= 2.2 mod_rewrite .htaccess support (AllowOverride All) The repository includes a default .htaccess file in the public folder. Nginx You need to convert the provided Apache related .htaccess file into Nginx configuration instructions. PHP &gt;= 8.2 Both mod_php and FCGI (FPM) are supported. Required Settings and Modules &amp; Extensions memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH) RDBMS Tested with MariaDB 10.11 LTS and MariaDB 11.4 LTS Tested with MySQL 8.4 LTS For MySQL 8.4 LTS be sure you have the below line in my.cnf mysql_native_password=ON Recommended extensions opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml, etc) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compessing files curl (required if APIs are used) sqlite3 - for tests","title":"Server Requirements"},{"location":"v5/introduction/server-requirements/#server-requirements","text":"For production, we highly recommend a *nix based system.","title":"Server Requirements"},{"location":"v5/introduction/server-requirements/#webserver","text":"","title":"Webserver"},{"location":"v5/introduction/server-requirements/#php-82","text":"Both mod_php and FCGI (FPM) are supported.","title":"PHP &gt;= 8.2"},{"location":"v5/introduction/server-requirements/#required-settings-and-modules-extensions","text":"memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH)","title":"Required Settings and Modules &amp; Extensions"},{"location":"v5/introduction/server-requirements/#rdbms","text":"Tested with MariaDB 10.11 LTS and MariaDB 11.4 LTS Tested with MySQL 8.4 LTS For MySQL 8.4 LTS be sure you have the below line in my.cnf mysql_native_password=ON","title":"RDBMS"},{"location":"v5/introduction/server-requirements/#recommended-extensions","text":"opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml, etc) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compessing files curl (required if APIs are used) sqlite3 - for tests","title":"Recommended extensions"},{"location":"v6/how-to/authorization/","text":"Authorization Guards The packages responsible for restricting access to certain parts of the application are dot-rbac-guard and dot-rbac . These packages work together to create an infrastructure that is customizable and diversified to manage user access to the platform by specifying the type of role the user has. The authorization.global.php file provides multiple configurations specifying multiple roles as well as the types of permissions to which these roles have access. //example of a flat RBAC model that specifies two types of roles as well as their permission 'roles' =&gt; [ 'admin' =&gt; [ 'permissions' =&gt; [ 'authenticated', 'edit', 'delete', //etc.. ] ], 'user' =&gt; [ 'permissions' =&gt; [ 'authenticated', //etc.. ] ] ] The authorization-guards.global.php file defines which permissions are required to access specific route handlers. These permissions must first be declared in the authorization.global.php (dot-rbac) configuration file. // Example configuration granting access to route handlers based on permissions. 'rules' =&gt; [ 'admin::admin-login-form' =&gt; [], 'admin::admin-login' =&gt; [], 'admin::admin-create-form' =&gt; ['authenticated'], 'admin::admin-create' =&gt; ['authenticated'], 'admin::admin-delete-form' =&gt; ['authenticated'], 'admin::admin-delete' =&gt; ['authenticated'], 'admin::admin-edit-form' =&gt; ['authenticated'], 'admin::admin-edit' =&gt; ['authenticated'], ]","title":"Configure Authorizations"},{"location":"v6/how-to/authorization/#authorization-guards","text":"The packages responsible for restricting access to certain parts of the application are dot-rbac-guard and dot-rbac . These packages work together to create an infrastructure that is customizable and diversified to manage user access to the platform by specifying the type of role the user has. The authorization.global.php file provides multiple configurations specifying multiple roles as well as the types of permissions to which these roles have access. //example of a flat RBAC model that specifies two types of roles as well as their permission 'roles' =&gt; [ 'admin' =&gt; [ 'permissions' =&gt; [ 'authenticated', 'edit', 'delete', //etc.. ] ], 'user' =&gt; [ 'permissions' =&gt; [ 'authenticated', //etc.. ] ] ] The authorization-guards.global.php file defines which permissions are required to access specific route handlers. These permissions must first be declared in the authorization.global.php (dot-rbac) configuration file. // Example configuration granting access to route handlers based on permissions. 'rules' =&gt; [ 'admin::admin-login-form' =&gt; [], 'admin::admin-login' =&gt; [], 'admin::admin-create-form' =&gt; ['authenticated'], 'admin::admin-create' =&gt; ['authenticated'], 'admin::admin-delete-form' =&gt; ['authenticated'], 'admin::admin-delete' =&gt; ['authenticated'], 'admin::admin-edit-form' =&gt; ['authenticated'], 'admin::admin-edit' =&gt; ['authenticated'], ]","title":"Authorization Guards"},{"location":"v6/how-to/creating-fixtures/","text":"Fixtures Fixtures are used to seed the database with initial values and should only be executed ONCE each, after migrating the database. Seeding the database is done with the help of our custom package dotkernel/dot-data-fixtures built on top of doctrine/data-fixtures . See below on how to use our CLI command for listing and executing Doctrine data fixtures. Working with fixtures You can find an example of a fixtures class in src/Core/src/App/src/Fixture/AdminLoader.php . To list all the available fixtures by order of execution run: php ./bin/doctrine fixtures:list To execute all fixtures run: php ./bin/doctrine fixtures:execute To execute a specific fixture, use its class name, like in this example: php ./bin/doctrine fixtures:execute --class=AdminLoader Fixtures can and should be ordered to ensure database consistency. More on ordering fixtures can be found here : https://www.doctrine-project.org/projects/doctrine-data-fixtures/en/latest/how-to/fixture-ordering.html#fixture-ordering","title":"Create Database Fixtures"},{"location":"v6/how-to/creating-fixtures/#fixtures","text":"Fixtures are used to seed the database with initial values and should only be executed ONCE each, after migrating the database. Seeding the database is done with the help of our custom package dotkernel/dot-data-fixtures built on top of doctrine/data-fixtures . See below on how to use our CLI command for listing and executing Doctrine data fixtures.","title":"Fixtures"},{"location":"v6/how-to/creating-fixtures/#working-with-fixtures","text":"You can find an example of a fixtures class in src/Core/src/App/src/Fixture/AdminLoader.php . To list all the available fixtures by order of execution run: php ./bin/doctrine fixtures:list To execute all fixtures run: php ./bin/doctrine fixtures:execute To execute a specific fixture, use its class name, like in this example: php ./bin/doctrine fixtures:execute --class=AdminLoader Fixtures can and should be ordered to ensure database consistency. More on ordering fixtures can be found here : https://www.doctrine-project.org/projects/doctrine-data-fixtures/en/latest/how-to/fixture-ordering.html#fixture-ordering","title":"Working with fixtures"},{"location":"v6/how-to/creating-migrations/","text":"Creating migrations Migrations are used to create and/or edit the database structure. To generate a new migration file, use this command: php ./vendor/bin/doctrine-migrations migrations:generate It creates a PHP file like this one src/Core/src/App/src/Migration/Version20240627134952.php that can then be edited in the IDE. You can add new queries in: public function up - these are executed when the migration is run. public function down - these are optional queries that undo the above changes. Example This example creates a new column named test . Add this in public function up : $this-&gt;addSql('ALTER TABLE admin ADD test VARCHAR(255) NOT NULL'); And its opposite in public function down : $this-&gt;addSql('ALTER TABLE admin DROP test');","title":"Create Database Migrations"},{"location":"v6/how-to/creating-migrations/#creating-migrations","text":"Migrations are used to create and/or edit the database structure. To generate a new migration file, use this command: php ./vendor/bin/doctrine-migrations migrations:generate It creates a PHP file like this one src/Core/src/App/src/Migration/Version20240627134952.php that can then be edited in the IDE. You can add new queries in: public function up - these are executed when the migration is run. public function down - these are optional queries that undo the above changes.","title":"Creating migrations"},{"location":"v6/how-to/creating-migrations/#example","text":"This example creates a new column named test . Add this in public function up : $this-&gt;addSql('ALTER TABLE admin ADD test VARCHAR(255) NOT NULL'); And its opposite in public function down : $this-&gt;addSql('ALTER TABLE admin DROP test');","title":"Example"},{"location":"v6/how-to/csrf/","text":"CSRF protection in forms A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error. Implement CSRF protection Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper Create field Open the form's PHP class and append the following code to the method that initializes the fields (usually init ): $this-&gt;add( (new \\Laminas\\Form\\Element\\Csrf('exampleCsrf')) -&gt;setOptions([ 'csrf_options' =&gt; ['timeout' =&gt; 3600, 'session' =&gt; new Container()], ]) -&gt;setAttribute('required', true) ); where exampleCsrf should be a suggestive name that describes the purpose of the field (example: forgotPasswordCsrf ). Validate field Open the InputFilter that validates the form fields and append the following code to the method that initializes the fields (usually init ): $this-&gt;add(new \\Admin\\App\\InputFilter\\Input\\CsrfInput('exampleCsrf')); where exampleCsrf must match the CSRF field's name in the form. Don't forget to modify both occurrences in this file. Make sure that you validate the form using its isValid method in the handler/controller where it is submitted. Render field Open the template that renders your form and add the following code somewhere between the form's opening and closing tags: {{ formElement(form.get('exampleCsrf')) }} Test the implementation Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: This field is required and cannot be empty. Timeout Note the timeout option in your PHP form's exampleCsrf field, with its default value set to 3600 . This represents the value in seconds for how long the token is valid. Submitting a form that has been rendered for longer than this value will result in a validation error: Invalid CSRF. You can modify the value of timeout in each form, but the default value should work in most cases.","title":"Set Up CSRF"},{"location":"v6/how-to/csrf/#csrf-protection-in-forms","text":"A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error.","title":"CSRF protection in forms"},{"location":"v6/how-to/csrf/#implement-csrf-protection","text":"Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper","title":"Implement CSRF protection"},{"location":"v6/how-to/csrf/#test-the-implementation","text":"Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: This field is required and cannot be empty.","title":"Test the implementation"},{"location":"v6/how-to/dependency-injection/","text":"Dependency Injection Dependency injection is a design pattern used in software development to implement inversion of control. In simpler terms, it's the act of providing dependencies for an object during instantiation. In PHP, dependency injection can be implemented in various ways, including through constructor injection, setter injection and property injection. Dotkernel Admin, through its dot-dependency-injection package focuses only on constructor injection. Usage Dotkernel Admin comes out of the box with the dot-dependency-injection package, which provides all the functionality injecting dependencies into any object you want. dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Each dependency is specified as a separate parameter of the #[Inject] attribute. For our example we will inject RouterInterface and AuthenticationServiceInterface dependencies into GetAccountLogoutHandler . use Dot\\DependencyInjection\\Attribute\\Inject; class GetAccountLogoutHandler implements RequestHandlerInterface { #[Inject( RouterInterface::class, AuthenticationServiceInterface::class, )] public function __construct( protected RouterInterface $router, protected AuthenticationServiceInterface $authenticationService, ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: config.example The next step is to register the class in the ConfigProvider under factories using Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . public function getDependencies(): array { return [ 'factories' =&gt; [ GetAccountLogoutHandler::class =&gt; AttributedServiceFactory::class, ] ]; } That's it. When your object is instantiated from the container, it will automatically have its dependencies resolved. Dependencies injection is available to any object within Dotkernel Admin. For example, you can inject dependencies in a service, a handler and so on, simply by registering them in the ConfigProvider .","title":"Inject Dependencies"},{"location":"v6/how-to/dependency-injection/#dependency-injection","text":"Dependency injection is a design pattern used in software development to implement inversion of control. In simpler terms, it's the act of providing dependencies for an object during instantiation. In PHP, dependency injection can be implemented in various ways, including through constructor injection, setter injection and property injection. Dotkernel Admin, through its dot-dependency-injection package focuses only on constructor injection.","title":"Dependency Injection"},{"location":"v6/how-to/dependency-injection/#usage","text":"Dotkernel Admin comes out of the box with the dot-dependency-injection package, which provides all the functionality injecting dependencies into any object you want. dot-dependency-injection determines the dependencies by looking at the #[Inject] attribute, added to the constructor of a class. Each dependency is specified as a separate parameter of the #[Inject] attribute. For our example we will inject RouterInterface and AuthenticationServiceInterface dependencies into GetAccountLogoutHandler . use Dot\\DependencyInjection\\Attribute\\Inject; class GetAccountLogoutHandler implements RequestHandlerInterface { #[Inject( RouterInterface::class, AuthenticationServiceInterface::class, )] public function __construct( protected RouterInterface $router, protected AuthenticationServiceInterface $authenticationService, ) { } } If your class needs the value of a specific configuration key, you can specify the path using dot notation: config.example The next step is to register the class in the ConfigProvider under factories using Dot\\DependencyInjection\\Factory\\AttributedServiceFactory::class . public function getDependencies(): array { return [ 'factories' =&gt; [ GetAccountLogoutHandler::class =&gt; AttributedServiceFactory::class, ] ]; } That's it. When your object is instantiated from the container, it will automatically have its dependencies resolved. Dependencies injection is available to any object within Dotkernel Admin. For example, you can inject dependencies in a service, a handler and so on, simply by registering them in the ConfigProvider .","title":"Usage"},{"location":"v6/how-to/npm_commands/","text":"NPM Commands To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. The recommended way to install npm is through Node Version Manager . The watch command compiles the components then monitors the files for changes and recompiles them. npm run watch After all updates are done, this command compiles the assets locally, minifies them and makes them ready for production. npm run prod","title":"Use NPM Commands"},{"location":"v6/how-to/npm_commands/#npm-commands","text":"To install dependencies into the node_modules directory run this command. npm install If npm install fails, this could be caused by user permissions of npm. The recommended way to install npm is through Node Version Manager . The watch command compiles the components then monitors the files for changes and recompiles them. npm run watch After all updates are done, this command compiles the assets locally, minifies them and makes them ready for production. npm run prod","title":"NPM Commands"},{"location":"v6/installation/composer/","text":"Composer Installation of Packages Composer is required to install Dotkernel Admin. You can install Composer from the official site . First make sure that you have navigated your command prompt to the folder where you copied the files in the previous step. Install dependencies Run this command in the command prompt. Use the CLI in order to ensure interactivity for proper configuration. composer install You should see this text below, along with a long list of packages to be installed instead of the [...] . In this example there are 171 packages, though the number can change in future updates. You will find the packages in the vendor folder. No composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https://getcomposer.org/install for more information. Loading composer repositories with package information Updating dependencies Lock file operations: 171 installs, 0 updates, 0 removals [...] Writing lock file Installing dependencies from lock file (including require-dev) Package operations: 171 installs, 0 updates, 0 removals [...] The setup script prompts for some configuration settings, for example the lines below: Please select which config file you wish to inject 'Laminas\\Validator\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Type 0 to select [0] Do not inject . We choose 0 because Dotkernel includes its own ConfigProvider which already contains the prompted configurations. If you choose [1] config/config.php , an extra ConfigProvider will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter to complete this stage. Development mode If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Composer"},{"location":"v6/installation/composer/#composer-installation-of-packages","text":"Composer is required to install Dotkernel Admin. You can install Composer from the official site . First make sure that you have navigated your command prompt to the folder where you copied the files in the previous step.","title":"Composer Installation of Packages"},{"location":"v6/installation/composer/#install-dependencies","text":"Run this command in the command prompt. Use the CLI in order to ensure interactivity for proper configuration. composer install You should see this text below, along with a long list of packages to be installed instead of the [...] . In this example there are 171 packages, though the number can change in future updates. You will find the packages in the vendor folder. No composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https://getcomposer.org/install for more information. Loading composer repositories with package information Updating dependencies Lock file operations: 171 installs, 0 updates, 0 removals [...] Writing lock file Installing dependencies from lock file (including require-dev) Package operations: 171 installs, 0 updates, 0 removals [...] The setup script prompts for some configuration settings, for example the lines below: Please select which config file you wish to inject 'Laminas\\Validator\\ConfigProvider' into: [0] Do not inject [1] config/config.php Make your selection (default is 1): Type 0 to select [0] Do not inject . We choose 0 because Dotkernel includes its own ConfigProvider which already contains the prompted configurations. If you choose [1] config/config.php , an extra ConfigProvider will be injected. The next question is: Remember this option for other packages of the same type? (y/N) Type y here, and hit enter to complete this stage.","title":"Install dependencies"},{"location":"v6/installation/composer/#development-mode","text":"If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Development mode"},{"location":"v6/installation/configuration-files/","text":"Configuration Files Mail If you intend to send emails from your Frontend, make sure to fill in SMTP connection params. This will be covered in the next section. optional : in order to run/create tests, duplicate config/autoload/local.test.php.dist as config/autoload/local.test.php this creates a new in-memory database that your tests will run on. If you want your application to send mail, add valid credentials to the following keys in config/autoload/mail.global.php Under message_options key: from - email address that will send emails (required) from_name - organization name for signing sent emails (optional) Please add at least 1 email address in order for contact message to reach someone Also feel free to add as many CCs as you require under the dot_mail =&gt; default =&gt; message_options =&gt; cc key.","title":"Configuration Files"},{"location":"v6/installation/configuration-files/#configuration-files","text":"","title":"Configuration Files"},{"location":"v6/installation/configuration-files/#mail","text":"If you intend to send emails from your Frontend, make sure to fill in SMTP connection params. This will be covered in the next section. optional : in order to run/create tests, duplicate config/autoload/local.test.php.dist as config/autoload/local.test.php this creates a new in-memory database that your tests will run on. If you want your application to send mail, add valid credentials to the following keys in config/autoload/mail.global.php Under message_options key: from - email address that will send emails (required) from_name - organization name for signing sent emails (optional) Please add at least 1 email address in order for contact message to reach someone Also feel free to add as many CCs as you require under the dot_mail =&gt; default =&gt; message_options =&gt; cc key.","title":"Mail"},{"location":"v6/installation/doctrine-orm/","text":"Doctrine ORM This step saves the database connection credentials in an Admin configuration file. We do not cover the creation steps of the database itself. Setup database Create a new MySQL database and set its collation to utf8mb4_general_ci . Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Below is the item you need to focus on. my_database , my_user , my_password are provided only as an example. $databases = [ 'default' =&gt; [ 'host' =&gt; 'localhost', 'dbname' =&gt; 'my_database', 'user' =&gt; 'my_user', 'password' =&gt; 'my_password', 'port' =&gt; 3306, 'driver' =&gt; 'pdo_mysql', 'charset' =&gt; 'utf8mb4', 'collate' =&gt; 'utf8mb4_general_ci', ], // you can add more database connections into this array ]; Running migrations Run the database migrations by using the following command: php ./vendor/bin/doctrine-migrations migrate If you have already run the migrations, you may get this message. You should double-check to make sure the new migrations are ok to run. WARNING! You have x previously executed migrations in the database that are not registered migrations. {migration list} Are you sure you wish to continue? (y/n) When using an empty database, you will get this confirmation message instead. WARNING! You are about to execute a migration in database \"&lt;your_database_name&gt;\" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) Again, submit y to run all the migrations in chronological order. Each migration will be logged in the migrations table to prevent running the same migration more than once, which is often not desirable. If everything ran correctly, you will get this confirmation. [OK] Successfully migrated to version: Core\\App\\Migration\\Version20250407142911 The migration name Version20250407142911 may differ in future Admin updates. Fixtures Run this command to populate the admin tables with the default values: php ./bin/doctrine fixtures:execute You should see our galloping horse in the command line. Executing Core\\App\\Fixture\\AdminRoleLoader Executing Core\\App\\Fixture\\OAuthClientLoader Executing Core\\App\\Fixture\\OAuthScopeLoader Executing Core\\App\\Fixture\\UserRoleLoader Executing Core\\App\\Fixture\\AdminLoader Executing Core\\App\\Fixture\\UserLoader Fixtures have been loaded. .'' ._.-.___.' (`\\ //( ( `' '/ )\\ ).__. ) ' &lt;' `\\ ._/'\\ ` \\ \\","title":"Doctrine ORM"},{"location":"v6/installation/doctrine-orm/#doctrine-orm","text":"This step saves the database connection credentials in an Admin configuration file. We do not cover the creation steps of the database itself.","title":"Doctrine ORM"},{"location":"v6/installation/doctrine-orm/#setup-database","text":"Create a new MySQL database and set its collation to utf8mb4_general_ci . Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Below is the item you need to focus on. my_database , my_user , my_password are provided only as an example. $databases = [ 'default' =&gt; [ 'host' =&gt; 'localhost', 'dbname' =&gt; 'my_database', 'user' =&gt; 'my_user', 'password' =&gt; 'my_password', 'port' =&gt; 3306, 'driver' =&gt; 'pdo_mysql', 'charset' =&gt; 'utf8mb4', 'collate' =&gt; 'utf8mb4_general_ci', ], // you can add more database connections into this array ];","title":"Setup database"},{"location":"v6/installation/doctrine-orm/#running-migrations","text":"Run the database migrations by using the following command: php ./vendor/bin/doctrine-migrations migrate If you have already run the migrations, you may get this message. You should double-check to make sure the new migrations are ok to run. WARNING! You have x previously executed migrations in the database that are not registered migrations. {migration list} Are you sure you wish to continue? (y/n) When using an empty database, you will get this confirmation message instead. WARNING! You are about to execute a migration in database \"&lt;your_database_name&gt;\" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) Again, submit y to run all the migrations in chronological order. Each migration will be logged in the migrations table to prevent running the same migration more than once, which is often not desirable. If everything ran correctly, you will get this confirmation. [OK] Successfully migrated to version: Core\\App\\Migration\\Version20250407142911 The migration name Version20250407142911 may differ in future Admin updates.","title":"Running migrations"},{"location":"v6/installation/doctrine-orm/#fixtures","text":"Run this command to populate the admin tables with the default values: php ./bin/doctrine fixtures:execute You should see our galloping horse in the command line. Executing Core\\App\\Fixture\\AdminRoleLoader Executing Core\\App\\Fixture\\OAuthClientLoader Executing Core\\App\\Fixture\\OAuthScopeLoader Executing Core\\App\\Fixture\\UserRoleLoader Executing Core\\App\\Fixture\\AdminLoader Executing Core\\App\\Fixture\\UserLoader Fixtures have been loaded. .'' ._.-.___.' (`\\ //( ( `' '/ )\\ ).__. ) ' &lt;' `\\ ._/'\\ ` \\ \\","title":"Fixtures"},{"location":"v6/installation/getting-started/","text":"Clone the project Recommended development environment If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WSL2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/admin.git . If everything ran correctly, you can expect to see an output like this, though the numbers may differ. Cloning into '.'... remote: Enumerating objects: 6538, done. remote: Counting objects: 100% (1652/1652), done. remote: Compressing objects: 100% (785/785), done. remote: Total 6538 (delta 804), reused 1417 (delta 748), pack-reused 4886 (from 1) Receiving objects: 100% (6538/6538), 11.84 MiB | 16.52 MiB/s, done. Resolving deltas: 100% (3359/3359), done. You can already open the project in your preferred IDE to double-check the files were copied correctly.","title":"Getting Started"},{"location":"v6/installation/getting-started/#clone-the-project","text":"","title":"Clone the project"},{"location":"v6/installation/getting-started/#recommended-development-environment","text":"If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WSL2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/admin.git . If everything ran correctly, you can expect to see an output like this, though the numbers may differ. Cloning into '.'... remote: Enumerating objects: 6538, done. remote: Counting objects: 100% (1652/1652), done. remote: Compressing objects: 100% (785/785), done. remote: Total 6538 (delta 804), reused 1417 (delta 748), pack-reused 4886 (from 1) Receiving objects: 100% (6538/6538), 11.84 MiB | 16.52 MiB/s, done. Resolving deltas: 100% (3359/3359), done. You can already open the project in your preferred IDE to double-check the files were copied correctly.","title":"Recommended development environment"},{"location":"v6/installation/installation-intro/","text":"Introduction In this tutorial, we will install Dotkernel Admin from scratch. We will focus on these tasks: Highlight 3rd party tools required for the installation. Provide all the relevant commands with expected responses. Configure the development environment. Run the project. By the end of this tutorial you will have a fully-functional Dotkernel Admin on your selected environment and can begin coding.","title":"Introduction"},{"location":"v6/installation/installation-intro/#introduction","text":"In this tutorial, we will install Dotkernel Admin from scratch. We will focus on these tasks: Highlight 3rd party tools required for the installation. Provide all the relevant commands with expected responses. Configure the development environment. Run the project. By the end of this tutorial you will have a fully-functional Dotkernel Admin on your selected environment and can begin coding.","title":"Introduction"},{"location":"v6/installation/manage-geolite2/","text":"Manage the GeoLite2 databases You can download/update a specific GeoLite2 database, by running the following command where {DATABASE} can be asn , city , country : php ./bin/cli.php geoip:synchronize -d {DATABASE} You can download/update all GeoLite2 databases at once, by running the following command: php ./bin/cli.php geoip:synchronize The output should be similar to the below, displaying per row: database identifier : previous build datetime -&gt; current build datetime . asn: n/a -&gt; 2024-11-01 02:29:44 city: n/a -&gt; 2024-11-01 02:29:31 country: n/a -&gt; 2024-11-01 02:25:09 n/a will be replaced by the older version of the GeoLite2 databases when you run the command again. Get help for this command by running: php ./bin/cli.php help geoip:synchronize If you set up the synchronizer command as a cronjob, you can add the -q|--quiet option, and it will output data only if an error has occurred.","title":"Manage Geolite2"},{"location":"v6/installation/manage-geolite2/#manage-the-geolite2-databases","text":"You can download/update a specific GeoLite2 database, by running the following command where {DATABASE} can be asn , city , country : php ./bin/cli.php geoip:synchronize -d {DATABASE} You can download/update all GeoLite2 databases at once, by running the following command: php ./bin/cli.php geoip:synchronize The output should be similar to the below, displaying per row: database identifier : previous build datetime -&gt; current build datetime . asn: n/a -&gt; 2024-11-01 02:29:44 city: n/a -&gt; 2024-11-01 02:29:31 country: n/a -&gt; 2024-11-01 02:25:09 n/a will be replaced by the older version of the GeoLite2 databases when you run the command again. Get help for this command by running: php ./bin/cli.php help geoip:synchronize If you set up the synchronizer command as a cronjob, you can add the -q|--quiet option, and it will output data only if an error has occurred.","title":"Manage the GeoLite2 databases"},{"location":"v6/installation/test-the-installation/","text":"Running the application Do not enable dev mode in production We recommend running your applications in WSL: Make sure you have WSL2 installed on your system. Currently we provide a distro implementations for AlmaLinux9 . Install the application in a virtualhost as recommended by the chosen distro. Set $baseUrl in config/autoload/local.php to the address of the virtualhost. Run the application by opening the virtualhost address in your browser. You should see the Dotkernel Admin login page. If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php ./bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php If you ran the fixtures you will have an admin user in the database with the following credentials: User : admin Password : dotadmin Production only : Make sure you modify the default admin credentials. Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: # other code return [ # other configurations... 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ], ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Test the Installation"},{"location":"v6/installation/test-the-installation/#running-the-application","text":"Do not enable dev mode in production We recommend running your applications in WSL: Make sure you have WSL2 installed on your system. Currently we provide a distro implementations for AlmaLinux9 . Install the application in a virtualhost as recommended by the chosen distro. Set $baseUrl in config/autoload/local.php to the address of the virtualhost. Run the application by opening the virtualhost address in your browser. You should see the Dotkernel Admin login page. If you are getting exceptions or errors regarding some missing services, try running the following command: sudo php ./bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php If you ran the fixtures you will have an admin user in the database with the following credentials: User : admin Password : dotadmin Production only : Make sure you modify the default admin credentials. Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: # other code return [ # other configurations... 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ], ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Running the application"},{"location":"v6/introduction/file-structure/","text":"File structure Dotkernel Admin follows the PSR-4 standards. It is considered good practice to standardize the file structure of projects. When using Dotkernel Admin the following structure is installed by default: Special purpose folders .github - Contains GitHub workflow files .laminas-ci - Contains laminas-ci workflow files bin folder This folder contents are clear-config-cache.php - Removes the config cache file data/cache/config-cache.php ; available only when development mode is enabled cli.php - Used to build console applications based on laminas-cli doctrine - Used by the doctrine fixtures to populate the database tables config folder This folder contains all application-related config files: cli-config.php - Command line interface configuration used by migrations, fixtures, crons config.php - Registers ConfigProviders for installing packages container.php - Main service container that provides access to all registered services development.config.php.dist - Activates debug mode; gets symlinked as development.config.php when enabling development mode migrations.php - Configuration for database migration, like migration file location and table to save the migration log pipeline.php - Contains a list of middlewares, in the order of their execution twig-cs-fixer.php - Configuration file for Twig code style checker/fixer config/autoload folder This folder contains all service-related local and global config files: app.global.php - Configures basic app variables authentication.global.php - Defines the Admin identity authorization.global.php - Configures permissions for user roles authorization-guards.global.php - Configures access per route for user roles cli.global.php - Configures cli cors.global.php - Configures Cross-Origin Resource Sharing, like call origin, headers, cookies dependencies.global.php - Config file to set global dependencies that should be accessible by all modules development.local.php.dist - Gets symlinked as development.local.php when enabling development mode; activates error handlers error-handling.global.php - Configures and activates error logs local.php.dist - Local config file where you can overwrite application name and URL local.test.php.dist - Local configuration for functional tests mail.global.php - Mail configuration; e.g. sendmail vs smtp, message configuration, mail logging mezzio.global.php - Mezzio core config file navigation.global.php - Configures the top menu session.global.php - Configures the session templates.global.php - dotkernel/dot-twigrenderer config file data folder This folder is a storage for project data files and service caches. It contains these folders: cache - Twig and Doctrine cache files geoip - Holds the GeoLite2 databases lock - Contains lock files generated by dotkernel/dot-cli AVOID storing sensitive data on the repository! log folder This folder stores daily log files. When you access the application from the browser, (if not already created) a new log file gets created in the format specified in the config/autoload/error-handling.global.php config file under the stream array key. public folder This folder contains all publicly available assets and serves as the entry point of the application: css and js - Contains the css and js file(s) generated by the webpack (npm) from the assets folder fonts and images - Contain the font and image file(s) copied by the webpack (npm) from the assets folder uploads - a folder that normally contains admin avatar images .htaccess - server configuration file used by Apache web server; it enables the URL rewrite functionality index.php - the application's main entry point robots.txt.dist - a sample robots.txt file that allows/denies bot access to certain areas of your application; activate it by duplicating the file as robots.txt and comment out the lines that don't match your environment src folder This folder contains a separate folder for each Module. These are the modules included by default: Admin - Contains functionality for managing users with admin role; note these are users save in the admin database table App - Contains core functionality, from authentication, to rendering, to error reporting Core – Contains the shared logic and base infrastructure used across multiple modules Dashboard – Contains the structure and rendering logic of the main admin dashboard, including layout, widgets, and default admin landing page Page - Contains reusable UI components and layout elements such as dropdowns, modal popups, error displays, and tooltips for the admin interface Setting - Contains functionality for saving and reading display settings User - Contains functionality for managing users; note these are users save in the user database table Module contents Each Module folder, in turn, should contain the following folders, unless they are empty: src/Handler - Action classes src/InputFilter - Validation rules for inputs src/Service - Service classes The above example is just some of the folders a project may include, but they should give you an idea about the recommended structure. Other classes the src folder may include are Adapter , Factory , Form , Delegator etc. The src folder in each Module folder normally also contains these files: ConfigProvider.php - Configuration data for the module OpenAPI.php - Detailed descriptions for each endpoint in the OpenAPI format RoutesDelegator.php - Module specific route registrations templates folder for modules This folder contains the template files, used for example to help render e-mail templates. twig is used as Templating Engine. All template files have the extension .html.twig . Core module The Core module is a common codebase set up to be used by the applications you added to your project. These are the submodules included by default: Admin - Contains logic for the admin submodule features App - Contains shared application-level services and infrastructure utilities Security - Contains authentication, authorization, and related security mechanisms Setting - Contains configuration and application settings management User - Contains user entities, repositories, and services handling user data and logic Each submodule folder should contain: src/Entity - Used by database entities src/Repository - Entity repository folder ConfigProvider.php - Configuration data for the module The above example is just some of the folders a project may include, but they should give you an idea about the recommended structure. Other classes the src folder may include are DBAL , Enum , Command , Factory etc.","title":"File Structure"},{"location":"v6/introduction/file-structure/#file-structure","text":"Dotkernel Admin follows the PSR-4 standards. It is considered good practice to standardize the file structure of projects. When using Dotkernel Admin the following structure is installed by default:","title":"File structure"},{"location":"v6/introduction/file-structure/#special-purpose-folders","text":".github - Contains GitHub workflow files .laminas-ci - Contains laminas-ci workflow files","title":"Special purpose folders"},{"location":"v6/introduction/file-structure/#bin-folder","text":"This folder contents are clear-config-cache.php - Removes the config cache file data/cache/config-cache.php ; available only when development mode is enabled cli.php - Used to build console applications based on laminas-cli doctrine - Used by the doctrine fixtures to populate the database tables","title":"bin folder"},{"location":"v6/introduction/file-structure/#config-folder","text":"This folder contains all application-related config files: cli-config.php - Command line interface configuration used by migrations, fixtures, crons config.php - Registers ConfigProviders for installing packages container.php - Main service container that provides access to all registered services development.config.php.dist - Activates debug mode; gets symlinked as development.config.php when enabling development mode migrations.php - Configuration for database migration, like migration file location and table to save the migration log pipeline.php - Contains a list of middlewares, in the order of their execution twig-cs-fixer.php - Configuration file for Twig code style checker/fixer","title":"config folder"},{"location":"v6/introduction/file-structure/#data-folder","text":"This folder is a storage for project data files and service caches. It contains these folders: cache - Twig and Doctrine cache files geoip - Holds the GeoLite2 databases lock - Contains lock files generated by dotkernel/dot-cli AVOID storing sensitive data on the repository!","title":"data folder"},{"location":"v6/introduction/file-structure/#log-folder","text":"This folder stores daily log files. When you access the application from the browser, (if not already created) a new log file gets created in the format specified in the config/autoload/error-handling.global.php config file under the stream array key.","title":"log folder"},{"location":"v6/introduction/file-structure/#public-folder","text":"This folder contains all publicly available assets and serves as the entry point of the application: css and js - Contains the css and js file(s) generated by the webpack (npm) from the assets folder fonts and images - Contain the font and image file(s) copied by the webpack (npm) from the assets folder uploads - a folder that normally contains admin avatar images .htaccess - server configuration file used by Apache web server; it enables the URL rewrite functionality index.php - the application's main entry point robots.txt.dist - a sample robots.txt file that allows/denies bot access to certain areas of your application; activate it by duplicating the file as robots.txt and comment out the lines that don't match your environment","title":"public folder"},{"location":"v6/introduction/file-structure/#src-folder","text":"This folder contains a separate folder for each Module. These are the modules included by default: Admin - Contains functionality for managing users with admin role; note these are users save in the admin database table App - Contains core functionality, from authentication, to rendering, to error reporting Core – Contains the shared logic and base infrastructure used across multiple modules Dashboard – Contains the structure and rendering logic of the main admin dashboard, including layout, widgets, and default admin landing page Page - Contains reusable UI components and layout elements such as dropdowns, modal popups, error displays, and tooltips for the admin interface Setting - Contains functionality for saving and reading display settings User - Contains functionality for managing users; note these are users save in the user database table","title":"src folder"},{"location":"v6/introduction/introduction/","text":"Introduction Dotkernel Admin is an application (skeleton) intended for quickly setting up an administration site for your platform. It's a fast and reliable way to manage records in your database with a simple table-based approach, and also to build reports and graphs to monitor your platform. The many graphical components at your disposal ensure an intuitive user experience. Check out our demo . Submit user admin and password dotadmin to authenticate yourself.","title":"Introduction"},{"location":"v6/introduction/introduction/#introduction","text":"Dotkernel Admin is an application (skeleton) intended for quickly setting up an administration site for your platform. It's a fast and reliable way to manage records in your database with a simple table-based approach, and also to build reports and graphs to monitor your platform. The many graphical components at your disposal ensure an intuitive user experience. Check out our demo . Submit user admin and password dotadmin to authenticate yourself.","title":"Introduction"},{"location":"v6/introduction/packages/","text":"Packages Dotkernel Admin 6.x will have full Laminas Service Manager 4 support once all dependencies do support it. Once Laminas Service Manager 4 is fully supported, Dotkernel Admin 6.x will be installable on PHP 8.4 as well. dotkernel/dot-cache : ^4.3 - Provides caching based on symfony/cache dotkernel/dot-cli : ^3.9 - Build console applications based on laminas-cli dotkernel/dot-data-fixtures : ^1.4 - Provides a CLI interface for listing &amp; executing doctrine data fixtures dotkernel/dot-dependency-injection : ^1.2 - Dependency injection component using class attributes dotkernel/dot-errorhandler : ^4.0 - Logging Error Handler for Middleware Applications dotkernel/dot-flashmessenger : ^3.6 - Provides session messages between redirects dotkernel/dot-geoip : ^3.9 - Retrieve information about an IP address based on maxmind/GeoIP2-php dotkernel/dot-helpers : ^3.8 - Helper/Utility classes based on mezzio/mezzio-helpers dotkernel/dot-mail : ^5.1 - Mail component based on laminas-mail dotkernel/dot-navigation : ^3.5 - Allows you to easily define and parse menus inside templates, configuration based approach dotkernel/dot-rbac-guard : ^3.6 - Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria dotkernel/dot-router : ^1.0 - Dotkernel component to build complex routes, based on mezzio/mezzio-fastroute dotkernel/dot-session : ^5.7 - Dotkernel session component extending and customizing laminas-session dotkernel/dot-twigrenderer : ^3.6 - Dotkernel component providing twig extensions and customizations friendsofphp/proxy-manager-lts : ^1.0 - Fork of ocramius/proxy-manager laminas/laminas-component-installer : ^3.5 - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator : ^1.18 - Lightweight library for collecting and merging configuration from different sources mezzio/mezzio : ^3.21 - PSR-15 Middleware Microframework mezzio-authentication-oauth2 : ^2.11 - Middleware for Mezzio and PSR-7 applications providing an OAuth2 server for authentication. mezzio/mezzio-authorization-rbac : ^1.9 - Mezzio authorization rbac adapter for laminas/laminas-permissions-rbac mezzio/mezzio-cors : ^1.14 - CORS component for Mezzio and other PSR-15 middleware runners mezzio/mezzio-fastroute : ^3.13 - FastRoute integration for Mezzio ramsey/uuid : ^4.5 - Library for generating and working with universally unique identifiers (UUIDs). ramsey/uuid-doctrine : ^2.1 - Use ramsey/uuid as a Doctrine field type roave/psr-container-doctrine : ^5.2 - Doctrine Factories for PSR-11 Containers","title":"Packages"},{"location":"v6/introduction/packages/#packages","text":"Dotkernel Admin 6.x will have full Laminas Service Manager 4 support once all dependencies do support it. Once Laminas Service Manager 4 is fully supported, Dotkernel Admin 6.x will be installable on PHP 8.4 as well. dotkernel/dot-cache : ^4.3 - Provides caching based on symfony/cache dotkernel/dot-cli : ^3.9 - Build console applications based on laminas-cli dotkernel/dot-data-fixtures : ^1.4 - Provides a CLI interface for listing &amp; executing doctrine data fixtures dotkernel/dot-dependency-injection : ^1.2 - Dependency injection component using class attributes dotkernel/dot-errorhandler : ^4.0 - Logging Error Handler for Middleware Applications dotkernel/dot-flashmessenger : ^3.6 - Provides session messages between redirects dotkernel/dot-geoip : ^3.9 - Retrieve information about an IP address based on maxmind/GeoIP2-php dotkernel/dot-helpers : ^3.8 - Helper/Utility classes based on mezzio/mezzio-helpers dotkernel/dot-mail : ^5.1 - Mail component based on laminas-mail dotkernel/dot-navigation : ^3.5 - Allows you to easily define and parse menus inside templates, configuration based approach dotkernel/dot-rbac-guard : ^3.6 - Defines authorization guards that authorize users for accessing certain parts of an application based on various criteria dotkernel/dot-router : ^1.0 - Dotkernel component to build complex routes, based on mezzio/mezzio-fastroute dotkernel/dot-session : ^5.7 - Dotkernel session component extending and customizing laminas-session dotkernel/dot-twigrenderer : ^3.6 - Dotkernel component providing twig extensions and customizations friendsofphp/proxy-manager-lts : ^1.0 - Fork of ocramius/proxy-manager laminas/laminas-component-installer : ^3.5 - Composer plugin for injecting modules and configuration providers into application configuration laminas/laminas-config-aggregator : ^1.18 - Lightweight library for collecting and merging configuration from different sources mezzio/mezzio : ^3.21 - PSR-15 Middleware Microframework mezzio-authentication-oauth2 : ^2.11 - Middleware for Mezzio and PSR-7 applications providing an OAuth2 server for authentication. mezzio/mezzio-authorization-rbac : ^1.9 - Mezzio authorization rbac adapter for laminas/laminas-permissions-rbac mezzio/mezzio-cors : ^1.14 - CORS component for Mezzio and other PSR-15 middleware runners mezzio/mezzio-fastroute : ^3.13 - FastRoute integration for Mezzio ramsey/uuid : ^4.5 - Library for generating and working with universally unique identifiers (UUIDs). ramsey/uuid-doctrine : ^2.1 - Use ramsey/uuid as a Doctrine field type roave/psr-container-doctrine : ^5.2 - Doctrine Factories for PSR-11 Containers","title":"Packages"},{"location":"v6/introduction/server-requirements/","text":"Server Requirements For production, we highly recommend a *nix based system. Webserver Apache &gt;= 2.2 mod_rewrite .htaccess support (AllowOverride All) The repository includes a default .htaccess file in the public folder. Nginx You need to convert the provided Apache related .htaccess file into Nginx configuration instructions. PHP &gt;= 8.2 Both mod_php and FCGI (FPM) are supported. Required Settings and Modules &amp; Extensions memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH) RDBMS Tested with MariaDB 10.11 LTS and MariaDB 11.4 LTS Tested with MySQL 8.4 LTS For MySQL 8.4 LTS be sure you have the below line in my.cnf mysql_native_password=ON Recommended extensions opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml, etc) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compessing files curl (required if APIs are used) sqlite3 - for tests","title":"Server Requirements"},{"location":"v6/introduction/server-requirements/#server-requirements","text":"For production, we highly recommend a *nix based system.","title":"Server Requirements"},{"location":"v6/introduction/server-requirements/#webserver","text":"","title":"Webserver"},{"location":"v6/introduction/server-requirements/#php-82","text":"Both mod_php and FCGI (FPM) are supported.","title":"PHP &gt;= 8.2"},{"location":"v6/introduction/server-requirements/#required-settings-and-modules-extensions","text":"memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH)","title":"Required Settings and Modules &amp; Extensions"},{"location":"v6/introduction/server-requirements/#rdbms","text":"Tested with MariaDB 10.11 LTS and MariaDB 11.4 LTS Tested with MySQL 8.4 LTS For MySQL 8.4 LTS be sure you have the below line in my.cnf mysql_native_password=ON","title":"RDBMS"},{"location":"v6/introduction/server-requirements/#recommended-extensions","text":"opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml, etc) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compessing files curl (required if APIs are used) sqlite3 - for tests","title":"Recommended extensions"},{"location":"v6/tutorials/create-book-module-via-dot-maker/","text":"Implementing a book module in Dotkernel Admin using DotMaker The dotkernel/dot-maker library can be used to programmatically generate project files and directories. It can be added to your API installation by following the official documentation . Folder and files structure The below files structure is what we will have at the end of this tutorial and is just an example, you can have multiple components such as event listeners, wrappers, etc. . └── src/ ├── Book/ │ ├── src/ │ │ ├── Handler/ │ │ │ ├── GetCreateBookFormHandler.php │ │ │ ├── GetDeleteBookFormHandler.php │ │ │ ├── GetEditBookFormHandler.php │ │ │ ├── GetListBookHandler.php │ │ │ ├── PostCreateBookHandler.php │ │ │ ├── PostDeleteBookHandler.php │ │ │ └── PostEditBookHandler.php │ │ ├── InputFilter/ │ │ │ ├── Input/ │ │ │ │ └── ConfirmDeleteBookInput.php │ │ │ ├── CreateBookInputFilter.php │ │ │ ├── DeleteBookInputFilter.php │ │ │ └── EditBookInputFilter.php │ │ ├── Service/ │ │ │ ├── BookService.php │ │ │ └── BookServiceInterface.php │ │ ├── ConfigProvider.php │ │ └── RoutesDelegator.php │ └── templates/ │ └── book/ │ ├── create-book-form.html.twig │ ├── delete-book-form.html.twig │ ├── edit-book-form.html.twig │ └── list-book.html.twig └── Core/ └── src/ └── Book/ └── src/ ├──Entity/ │ └──Book.php ├──Repository/ │ └──BookRepository.php └── ConfigProvider.php src/Book/src/Handler/GetCreateBookFormHandler.php – handler that reflects the GET action for the CreateBookForm class src/Book/src/Handler/GetDeleteBookFormHandler.php – handler that reflects the GET action for the DeleteBookForm class src/Book/src/Handler/GetEditBookFormHandler.php – handler that reflects the GET action for the EditBookForm class src/Book/src/Handler/GetListBookHandler.php – handler that reflects the GET action for a configurable list of Book entities src/Book/src/Handler/PostCreateBookHandler.php – handler that reflects the POST action for creating a Book entity src/Book/src/Handler/PostDeleteBookHandler.php – handler that reflects the POST action for deleting a Book entity src/Book/src/Handler/PostEditBookHandler.php – handler that reflects the POST action for editing a Book entity src/Book/src/InputFilter/Input/* – input filters and validator configurations src/Book/src/InputFilter/CreateBookInputFilter.php – input filters and validators src/Book/src/InputFilter/EditBookInputFilter.php – input filters and validators src/Book/src/InputFilter/DeleteBookInputFilter.php – input filters and validators src/Book/src/Service/BookService.php – is a class or component responsible for performing a specific task or providing functionality to other parts of the application src/Book/src/Service/BookServiceInterface.php – interface that reflects the publicly available methods in BookService src/Book/src/ConfigProvider.php – is a class that provides configuration for various aspects of the framework or application src/Book/src/RoutesDelegator.php – a routes delegator is a delegator factory responsible for configuring routing middleware based on routing configuration provided by the application src/Book/templates/book/create-book-form.html.twig – a Twig template for generating the view for the CreateBookForm class src/Book/templates/book/delete-book-form.html.twig – a Twig template for generating the view for the DeleteBookForm class src/Book/templates/book/edit-book-form.html.twig – a Twig template for generating the view for the EditBookForm class src/Book/templates/book/list-book.html.twig – a Twig template for generating the view for the list of Book entities src/Core/src/Book/src/Entity/Book.php – an entity refers to a PHP class that represents a persistent object or data structure src/Core/src/Book/src/Repository/BookRepository.php – a repository is a class responsible for querying and retrieving entities from the database src/Core/src/Book/src/ConfigProvider.php – is a class that provides configuration for Doctrine ORM Note that while this tutorial covers a standalone case, the Core module generated by default has the same structure as the one described in the Dotkernel API \"Book\" module allowing use as part of the Dotkernel Headless Platform File creation and contents After successfully installing dot-maker , it can be used to generate the Book module. Invoke dot-maker by executing ./vendor/bin/dot-maker or via the optional script described in the documentation - composer make . This will list all component types that can be created - for the purposes of this tutorial, enter module : ./vendor/bin/dot-maker module Type book when prompted to enter the module name. Next you will be prompted to add the relevant components of a module, accepting y(es) , n(o) and Enter (defaults to yes ): Note that dot-maker will automatically split the files into the described Api and Core structure without a further input needed. Entity and repository (Y): will generate the Book.php entity and the associated BookRepository.php . Service and service interface (Y): will generate the BookService and the BookServiceInterface . Command , followed by middleware (N): not necessary for the module described in this tutorial. Handler (Y): this option is needed, and will further prompt you for the required actions. Allow listing Books? (Y): this will generate the GetListBookHandler.php class and the list-book.html.twig . Allow viewing Books? (N): not necessary for the module described in this tutorial. Allow creating Books? (Y): will generate all files used for creating Book entities, as follows: The form used for creation CreateBookForm as well as the input filter it uses CreateBookInputFilter The handler that fetches the form GetCreateBookFormHandler The handler for the POST action PostCreateBookHandler The template file used for the form create-book-form.html.twig Allow deleting Books? (Y): similar to the previous step, this step will generate multiple files: The form used for creation DeleteBookForm , the input filter it uses DeleteBookInputFilter as well as a singular Input class it uses - ConfirmDeleteBookInput The handler that fetches the form GetDeleteBookFormHandler The handler for the POST action PostDeleteBookHandler The template file used for the form delete-book-form.html.twig Allow editing Books? (Y): as the previous two cases, multiple files are generated on this step as well: The form used for creation EditBookForm and the input filter it uses EditBookInputFilter The handler that fetches the form GetEditBookFormHandler The handler for the POST action PostEditBookHandler The template file used for the form edit-book-form.html.twig Following this step, dot-maker will automatically generate the ConfigProvider.php classes for both the Admin and Core namespaces, as well as the RoutesDelegator class containing all the relevant routes. You will then be instructed to: Register the ConfigProvider classes by adding Admin\\Book\\ConfigProvider::class and Core\\Book\\ConfigProvider::class to config/config.php Register the new Book namespace by adding \"Admin\\\\Book\\\\\": \"src/Book/src/\" and \"Core\\\\Book\\\\\": \"src/Core/src/Book/src/\" to composer.json under the autoload.psr-4 key. After registering the namespace, run the following command to regenerate the autoloaded files, as notified by dot-maker : composer dump dot-maker will by default prompt you to generate the migrations for the new entity, but for the purpose of this tutorial we will run this after updating the generated entity. The next step is filling in the required logic for the proposed flow of this module. While dot-maker does also include common logic in the relevant files, the tutorial adds custom functionality. As such, the following section will go over the files that require changes. src/Book/src/Handler/GetListBookHandler.php The overall class structure is fully generated, but for the purpose of this tutorial you will need to send the indentifier key to the template, as shown below: return new HtmlResponse( $this-&gt;template-&gt;render('book::book-list', [ 'pagination' =&gt; $this-&gt;bookService-&gt;getBooks($request-&gt;getQueryParams()), 'identifier' =&gt; SettingIdentifierEnum::IdentifierTableUserListSelectedColumns-&gt;value, ]) ); src/Core/src/App/src/Message.php The generated PostCreateBookHandler , PostEditBookHandler and PostDeleteBookHandler classes will by default make use of the Message::BOOK_CREATED , Message::BOOK_UPDATED and Message::BOOK_DELETED constants which you will have to manually add: public const BOOK_CREATED = 'Book created successfully.'; public const BOOK_UPDATED = 'Book updated successfully.'; public const BOOK_DELETED = 'Book deleted successfully.'; src/Core/src/Book/src/Entity/Book.php To keep things simple in this tutorial, our book will have three properties: name , author and releaseDate . Add the three properties and their getters and setters, while making sure to update the generated constructor method. &lt;?php declare(strict_types=1); namespace Core\\Book\\Entity; use Core\\App\\Entity\\AbstractEntity; use Core\\App\\Entity\\TimestampsTrait; use Core\\Book\\Repository\\BookRepository; use DateTimeImmutable; use Doctrine\\ORM\\Mapping as ORM; #[ORM\\Entity(repositoryClass: BookRepository::class)] #[ORM\\Table(\"book\")] #[ORM\\HasLifecycleCallbacks] class Book extends AbstractEntity { use TimestampsTrait; #[ORM\\Column(name: \"name\", type: \"string\", length: 100)] protected string $name; #[ORM\\Column(name: \"author\", type: \"string\", length: 100)] protected string $author; #[ORM\\Column(name: \"releaseDate\", type: \"datetime_immutable\")] protected DateTimeImmutable $releaseDate; public function __construct(string $name, string $author, DateTimeImmutable $releaseDate) { parent::__construct(); $this-&gt;setName($name); $this-&gt;setAuthor($author); $this-&gt;setReleaseDate($releaseDate); } public function getName(): string { return $this-&gt;name; } public function setName(string $name): self { $this-&gt;name = $name; return $this; } public function getAuthor(): string { return $this-&gt;author; } public function setAuthor(string $author): self { $this-&gt;author = $author; return $this; } public function getReleaseDate(): DateTimeImmutable { return $this-&gt;releaseDate; } public function setReleaseDate(DateTimeImmutable $releaseDate): self { $this-&gt;releaseDate = $releaseDate; return $this; } public function getArrayCopy(): array { return [ 'uuid' =&gt; $this-&gt;getUuid()-&gt;toString(), 'name' =&gt; $this-&gt;getName(), 'author' =&gt; $this-&gt;getAuthor(), 'releaseDate' =&gt; $this-&gt;getReleaseDate(), ]; } } The BookService class will require minor modifications for the getBooks() and saveBook() methods, to add the custom properties added in the previous step. The class should look like the following after updating the methods. src/Book/src/Service/BookService.php &lt;?php declare(strict_types=1); namespace Admin\\Book\\Service; use Admin\\App\\Exception\\NotFoundException; use Core\\App\\Helper\\Paginator; use Core\\App\\Message; use Core\\Book\\Entity\\Book; use Core\\Book\\Repository\\BookRepository; use DateTimeImmutable; use Doctrine\\ORM\\Tools\\Pagination\\Paginator as DoctrinePaginator; use Dot\\DependencyInjection\\Attribute\\Inject; use function array_key_exists; use function in_array; class BookService implements BookServiceInterface { #[Inject( BookRepository::class, )] public function __construct( protected BookRepository $bookRepository, ) { } public function getBookRepository(): BookRepository { return $this-&gt;bookRepository; } public function deleteBook( Book $book, ): void { $this-&gt;bookRepository-&gt;deleteResource($book); } /** * @param array&lt;non-empty-string, mixed&gt; $params */ public function getBooks( array $params, ): array { $filters = $params['filters'] ?? []; $params = Paginator::getParams($params, 'book.created'); $sortableColumns = [ 'book.name', 'book.author', 'book.releaseDate', 'book.created', 'book.updated', ]; if (! in_array($params['sort'], $sortableColumns, true)) { $params['sort'] = 'book.created'; } $paginator = new DoctrinePaginator($this-&gt;bookRepository-&gt;getBooks($params, $filters)-&gt;getQuery()); return Paginator::wrapper($paginator, $params, $filters); } /** * @param array&lt;non-empty-string, mixed&gt; $data * @throws \\DateMalformedStringException */ public function saveBook( array $data, ?Book $book = null, ): Book { if (! $book instanceof Book) { $book = new Book( $data['name'], $data['author'], new DateTimeImmutable($data['releaseDate']) ); } else { if (array_key_exists('name', $data) &amp;&amp; $data['name'] !== null) { $book-&gt;setName($data['name']); } if (array_key_exists('author', $data) &amp;&amp; $data['author'] !== null) { $book-&gt;setAuthor($data['author']); } if (array_key_exists('releaseDate', $data) &amp;&amp; $data['releaseDate'] !== null) { $book-&gt;setReleaseDate(new DateTimeImmutable($data['releaseDate'])); } } $this-&gt;bookRepository-&gt;saveResource($book); return $book; } /** * @throws NotFoundException */ public function findBook( string $uuid, ): Book { $book = $this-&gt;bookRepository-&gt;find($uuid); if (! $book instanceof Book) { throw new NotFoundException(Message::resourceNotFound('Book')); } return $book; } } When creating a book, we will need some validators, so we will create a form and the input filter that will be used to validate the data received in the request. src/Book/src/Form/CreateBookForm.php The default Csrf and Submit Inputs will be automatically added to the CreateBookForm.php class that dot-maker will create for you. For this tutorial, you will have to add the custom inputs, by copying the following code in the init function of CreateBookForm : $this-&gt;add( (new Text('name')) -&gt;setLabel('Name') -&gt;setAttribute('required', true) )-&gt;add( (new Text('author')) -&gt;setLabel('Author') -&gt;setAttribute('required', true) )-&gt;add( (new Date('releaseDate')) -&gt;setLabel('Release Date') -&gt;setAttribute('required', true) ); src/Book/src/Form/EditBookForm.php A similar sequence is used for the init function of EditBookForm , with the required attributes removed, as leaving the inputs empty is allowed for keeping the original data: $this-&gt;add( (new Text('name')) -&gt;setLabel('Name') )-&gt;add( (new Text('author')) -&gt;setLabel('Author') )-&gt;add( (new Date('releaseDate')) -&gt;setLabel('Release Date') ); By creating a module with dot-maker , separate inputs will not be created. However, you can still generate them as using these steps: Run the following to start adding Input classes: ./vendor/bin/dot-maker input When prompted, enter the names Author , Name and ReleaseDate one by one to generate the classes. The resulting AuthorInput.php , NameInput.php and ReleaseDateInput.php classes require no further changes for the tutorial use case. The module creation process has generated the parent input filters CreateBookInputFilter.php and EditBookInputFilter.php containing only the default CsrfInput . Now we add all the inputs together in the parent input filters' init functions, as below: src/Book/src/InputFilter/CreateBookInputFilter.php and src/Book/src/InputFilter/EditBookInputFilter.php $this-&gt;add(new NameInput('name')) -&gt;add(new AuthorInput('author')) -&gt;add(new ReleaseDateInput('releaseDate')); We create separate Input files to demonstrate their reusability and obtain a clean InputFilter s, but you could have all the inputs created directly in the InputFilter like this: Note that dot-maker will not generate inputs in the init method, so the following are to be added by hand before the default CsrfInput , if going for this approach. CreateBookInputFilter $nameInput = new Input('name'); $nameInput-&gt;setRequired(true); $nameInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $nameInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($nameInput); $authorInput = new Input('author'); $authorInput-&gt;setRequired(true); $authorInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $authorInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($authorInput); $releaseDateInput = new Input('releaseDate'); $releaseDateInput-&gt;setRequired(true); $releaseDateInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $releaseDateInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($releaseDateInput); EditBookInputFilter $nameInput = new Input('name'); $nameInput-&gt;setRequired(false); $nameInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $nameInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($nameInput); $authorInput = new Input('author'); $authorInput-&gt;setRequired(false); $authorInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $authorInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($authorInput); $releaseDateInput = new Input('releaseDate'); $releaseDateInput-&gt;setRequired(false); $releaseDateInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $releaseDateInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($releaseDateInput); src/App/assets/js/components/_book.js As the listing pages make use of JavaScript, you will need to manually create your module specific _book.js file and register it in webpack.config.js for building. You may copy this sample _book.js file to the src/App/assets/js/components/ directory: $(document).ready(() =&gt; { const request = async(url, options = {}) =&gt; { try { const response = await fetch(url, options); const body = await response.text(); if (! response.ok) { throw { data: body, } } return body; } catch (error) { throw { data: error.data, } } } $(\"#add-book-modal\").on('show.bs.modal', function () { const modal = $(this); request(modal.data('add-url'), { method: 'GET' }).then(data =&gt; { modal.find('.modal-dialog').html(data); }).catch(error =&gt; { console.error(error); location.reload(); }); }).on('hidden.bs.modal', function () { const modal = $(this); modal.find('.modal-dialog').find('.modal-body').html('Loading...'); }); $(\"#edit-book-modal\").on('show.bs.modal', function () { const selectedElement = $('.ui-checkbox:checked'); if (selectedElement.length !== 1) { return; } const modal = $(this); request(selectedElement.data('edit-url'), { method: 'GET' }).then(data =&gt; { modal.find('.modal-dialog').html(data); }).catch(error =&gt; { console.error(error); location.reload(); }); }).on('hidden.bs.modal', function () { const modal = $(this); modal.find('.modal-dialog').find('.modal-body').html('Loading...'); }); $(\"#delete-book-modal\").on('show.bs.modal', function () { const selectedElement = $('.ui-checkbox:checked'); if (selectedElement.length !== 1) { return; } const modal = $(this); request(selectedElement.data('delete-url'), { method: 'GET' }).then(data =&gt; { modal.find('.modal-dialog').html(data); }).catch(error =&gt; { console.error(error); location.reload(); }); }).on('hidden.bs.modal', function () { const modal = $(this); modal.find('.modal-dialog').find('.modal-body').html('Loading...'); }); $(document).on(\"submit\", \"#book-form\", (event) =&gt; { event.preventDefault(); const form = event.target; if (! form.checkValidity()) { event.stopPropagation(); form.classList.add('was-validated'); return; } const modal = $(form.closest('.modal')); request(form.getAttribute('action'), { method: 'POST', body: new FormData(form), }).then(() =&gt; { location.reload(); }).catch(error =&gt; { modal.find('.modal-dialog').html(error.data); }); }); $(document).on(\"submit\", \"#delete-book-form\", (event) =&gt; { event.preventDefault(); const form = event.target; if (! form.checkValidity()) { event.stopPropagation(); form.classList.add('was-validated'); return; } const modal = $(form.closest('.modal')); request(form.getAttribute('action'), { method: 'POST', body: new FormData(form), }).then(() =&gt; { location.reload(); }).catch(error =&gt; { modal.find('.modal-dialog').html(error.data); }); }); }); Next you have to register the file in the entries array of webpack.config.js by adding the following key: book: [ './App/assets/js/components/_book.js' ] To make use of the newly added scripts, make sure to build your assets by running the command: npm run prod src/Book/templates/book/* The next step is creating the page structures in the .twig files dot-maker automatically generated for you. For this tutorial you may copy the following default page layout in the list-book.html.twig : {% from '@partial/macros.html.twig' import sortableColumn %} {% extends '@layout/default.html.twig' %} {% block title %}Manage books{% endblock %} {% block content %} &lt;div class=\"container-fluid\"&gt; &lt;h4 class=\"c-grey-900 mT-10 mB-30\"&gt;Manage books&lt;/h4&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;div class=\"bgc-white bd bdrs-3 pL-10 pR-20 pT-20 pB-3 mB-20\"&gt; &lt;form class=\"row g-3\" method=\"get\" action=\"{{ path('book::list-book') }}\"&gt; &lt;input type=\"hidden\" name=\"offset\" value=\"0\" /&gt; &lt;input type=\"hidden\" name=\"limit\" value=\"{{ pagination.limit }}\" /&gt; &lt;input type=\"hidden\" name=\"sort\" value=\"{{ pagination.sort }}\" /&gt; &lt;input type=\"hidden\" name=\"order\" value=\"{{ pagination.dir }}\" /&gt; &lt;div class=\"col-sm-auto btn-group-sm\"&gt; &lt;button type=\"button\" class=\"btn btn-default btn-sm\" id=\"btn-add-resource\" data-bs-toggle=\"modal\" data-bs-target=\"#add-book-modal\"&gt; &lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-default btn-sm\" id=\"btn-edit-resource\" data-bs-toggle=\"modal\" data-bs-target=\"#edit-book-modal\" disabled&gt; &lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-default btn-sm\" id=\"btn-delete-resource\" data-bs-toggle=\"modal\" data-bs-target=\"#delete-book-modal\" disabled&gt; &lt;i class=\"fa fa-trash-o\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;div class=\"col-sm-auto ms-auto\"&gt; &lt;div class=\"dropdown\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-custom-class=\"custom-tooltip\" data-bs-title=\"Toggle columns\"&gt; &lt;button class=\"btn btn-light btn-sm dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt; &lt;i class=\"fa fa-columns\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;ul class=\"dropdown-menu\" id=\"column-selector\"&gt;&lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-12\"&gt; &lt;div class=\"table-responsive\"&gt; &lt;table id=\"book-table\" class=\"table table-bordered table-hover table-striped table-light\" style=\"display: none;\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class=\"column-book-uuid\"&gt;&lt;/th&gt; &lt;th class=\"column-book-name\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.name', 'Name') }} &lt;/th&gt; &lt;th class=\"column-book-author\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.author', 'Author') }} &lt;/th&gt; &lt;th class=\"column-book-release-date\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.release-date', 'Release Date') }} &lt;/th&gt; &lt;th class=\"column-book-created\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.created', 'Created') }} &lt;/th&gt; &lt;th class=\"column-book-updated\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.updated', 'Updated') }} &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; {% for book in pagination.items %} &lt;tr class=\"table-row\"&gt; &lt;td class=\"column-book-uuid\" style=\"width: 1vw;\"&gt; &lt;label&gt; &lt;input type=\"checkbox\" class=\"checkbox ui-checkbox\" value=\"{{ book.uuid }}\" data-edit-url=\"{{ path('book::edit-book', {uuid: book.uuid}) }}\" data-delete-url=\"{{ path('book::delete-book', {uuid: book.uuid}) }}\" &gt; &lt;/label&gt; &lt;/td&gt; &lt;td class=\"column-book-name\"&gt;{{ book.name }}&lt;/td&gt; &lt;td class=\"column-book-author\"&gt;{{ book.author }}&lt;/td&gt; &lt;td class=\"column-book-release-date\"&gt;{{ book.releaseDate|date('Y-m-d') }}&lt;/td&gt; &lt;td class=\"column-book-created\"&gt;{{ book.getCreated()|date('Y-m-d H:i:s') }}&lt;/td&gt; &lt;td class=\"column-book-updated\"&gt;{{ book.getUpdated() is not null ? book.getUpdated()|date('Y-m-d H:i:s') : '' }}&lt;/td&gt; &lt;/tr&gt; {% endfor %} &lt;/tbody&gt; &lt;/table&gt; {% if pagination.isOutOfBounds %} &lt;div class=\"alert alert-warning text-center text-black fw-bold\" role=\"alert\"&gt; Out of bounds! Return to &lt;a href=\"{{ path('book::list-book', {}, pagination.queryParams|merge({offset: pagination.lastOffset})) }}\"&gt;page {{ pagination.lastPage }}&lt;/a&gt; &lt;/div&gt; {% endif %} &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-12\"&gt; &lt;div class=\"bgc-white bd bdrs-3 p-20 mB-20\"&gt; {{ include('@partial/pagination.html.twig', {pagination: pagination, path: 'book::list-book'}, false) }} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal fade\" id=\"add-book-modal\" tabindex=\"-1\" aria-labelledby=\"add-book-modal-content\" aria-hidden=\"true\" data-add-url=\"{{ path('book::create-book') }}\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"add-book-modal-content\"&gt;Create book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt;Loading...&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal fade\" id=\"edit-book-modal\" tabindex=\"-1\" aria-labelledby=\"edit-book-modal-content\" aria-hidden=\"true\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"edit-book-modal-content\"&gt;Edit book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt;Loading...&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal fade\" id=\"delete-book-modal\" tabindex=\"-1\" aria-labelledby=\"delete-book-modal-content\" aria-hidden=\"true\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"delete-book-modal-content\"&gt;Delete book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt;Loading...&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {% endblock %} {% block javascript %} {{ parent() }} &lt;script&gt; const tableId = '#book-table'; const storeSettingsUrl = '{{ path('setting::store-setting', {identifier: identifier}) }}'; const getSettingsUrl = '{{ path('setting::view-setting', {identifier: identifier}) }}'; &lt;/script&gt; &lt;script src=\"{{ asset('js/table_settings.js') }}\" defer&gt;&lt;/script&gt; &lt;script src=\"{{ asset('js/book.js') }}\" defer&gt;&lt;/script&gt; {% endblock %} To add books, a modal must be generated based on the CreateBookForm.php class. You may copy the following structure in create-book-form.html.twig : {% from '@partial/macros.html.twig' import inputElement, submitElement %} &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"add-book-modal-content\"&gt;Create book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close btn-sm\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; {{ form().openTag(form)|raw }} {% set fieldsets = form.getFieldsets() %} {{ inputElement(form.get('name')) }} {{ inputElement(form.get('author')) }} {{ inputElement(form.get('releaseDate')) }} {{ inputElement(form.get('createBookCsrf')) }} {{ submitElement(form.get('submit')) }} {{ form().closeTag()|raw }} {% if messages is defined and messages is iterable %} {% for type, message in messages %} &lt;div class=\"mt-3 alert alert-{% if type == 'success' %}success{% elseif type == 'warning' %}warning{% else %}danger{% endif %}\" role=\"alert\"&gt;{{ message }}&lt;/div&gt; {% endfor %} {% endif %} &lt;/div&gt; &lt;/div&gt; For the \"edit\" action, use the following modal in the edit-book-form.html.twig : {% from '@partial/macros.html.twig' import inputElement, submitElement %} &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"edit-book-modal-content\"&gt;Edit book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close btn-sm\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; {{ form().openTag(form)|raw }} {% set fieldsets = form.getFieldsets() %} {{ inputElement(form.get('name')) }} {{ inputElement(form.get('author')) }} {{ inputElement(form.get('releaseDate')) }} {{ inputElement(form.get('editBookCsrf')) }} {{ submitElement(form.get('submit')) }} {{ form().closeTag()|raw }} {% if messages is defined and messages is iterable %} {% for type, message in messages %} &lt;div class=\"mt-3 alert alert-{% if type == 'success' %}success{% elseif type == 'warning' %}warning{% else %}danger{% endif %}\" role=\"alert\"&gt;{{ message }}&lt;/div&gt; {% endfor %} {% endif %} &lt;/div&gt; &lt;/div&gt; Add the following structure to the delete-book-form.html.twig file: &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"delete-book-modal-content\"&gt;Delete book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; {{ form().openTag(form)|raw }} &lt;div class=\"row\"&gt;book &lt;div class=\"col-md-12\"&gt; &lt;p&gt;Are you sure you want to delete the following book: &lt;span id=\"book\" class=\"fw-bold\"&gt;{{ book.name }} by {{ book.author }}&lt;/span&gt; ?&lt;/p&gt; &lt;div class=\"form-check\"&gt; {{ formElement(form.get('confirmation')) }} &lt;label class=\"form-check-label\" for=\"confirmation\"&gt;Yes, I want to delete &lt;span class=\"fw-bold\"&gt;{{ book.name }} by {{ book.author }}&lt;/span&gt;&lt;/label&gt; &lt;/div&gt; &lt;div class=\"d-flex justify-content-end\"&gt; {{ formElement(form.get('submit')) }} {{ formElement(form.get('deleteBookCsrf')) }} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {{ form().closeTag()|raw }} &lt;/div&gt; &lt;/div&gt; /config/autoload/navigation.global.php Lastly, link the new module to the admin side-menu by adding the following array to navigation.global.php , under the dot_navigation.containers.main_menu.options.items key: [ 'options' =&gt; [ 'label' =&gt; 'Book', 'route' =&gt; [ 'route_name' =&gt; 'book::list-book', ], 'icon' =&gt; 'c-blue-500 fa fa-book', ], ], Migrations All changes are done, so at this point the migration file can be generated to create the associated table for the Book entity. You can check the mapping files by running: php ./bin/doctrine orm:validate-schema Generate the migration files by running: php ./vendor/bin/doctrine-migrations diff This will check for differences between your entities and database structure and create migration files if necessary, in src/Core/src/App/src/Migration . To execute the migrations run: php ./vendor/bin/doctrine-migrations migrate Update the authorization file We need to configure access to the newly created endpoints. Open config/autoload/authorization-guards.global.php and append the below routes to the guards.options.rules key: 'book::create-book-form' =&gt; ['authenticated'], 'book::create-book' =&gt; ['authenticated'], 'book::list-book' =&gt; ['authenticated'], Make sure you read and understand the rbac documentation . Checking routes The module should now be accessible via the Book section of the Admin main menu, linking to the newly created /list-book route. New book entities can be added via the new \"Create book\" modal accessible form the + button on the management page. Once selected with the checkbox, existing entries can be edited via the - button , or deleted via the \"trash\" icon.","title":"Creating a book module using DotMaker"},{"location":"v6/tutorials/create-book-module-via-dot-maker/#implementing-a-book-module-in-dotkernel-admin-using-dotmaker","text":"The dotkernel/dot-maker library can be used to programmatically generate project files and directories. It can be added to your API installation by following the official documentation .","title":"Implementing a book module in Dotkernel Admin using DotMaker"},{"location":"v6/tutorials/create-book-module-via-dot-maker/#folder-and-files-structure","text":"The below files structure is what we will have at the end of this tutorial and is just an example, you can have multiple components such as event listeners, wrappers, etc. . └── src/ ├── Book/ │ ├── src/ │ │ ├── Handler/ │ │ │ ├── GetCreateBookFormHandler.php │ │ │ ├── GetDeleteBookFormHandler.php │ │ │ ├── GetEditBookFormHandler.php │ │ │ ├── GetListBookHandler.php │ │ │ ├── PostCreateBookHandler.php │ │ │ ├── PostDeleteBookHandler.php │ │ │ └── PostEditBookHandler.php │ │ ├── InputFilter/ │ │ │ ├── Input/ │ │ │ │ └── ConfirmDeleteBookInput.php │ │ │ ├── CreateBookInputFilter.php │ │ │ ├── DeleteBookInputFilter.php │ │ │ └── EditBookInputFilter.php │ │ ├── Service/ │ │ │ ├── BookService.php │ │ │ └── BookServiceInterface.php │ │ ├── ConfigProvider.php │ │ └── RoutesDelegator.php │ └── templates/ │ └── book/ │ ├── create-book-form.html.twig │ ├── delete-book-form.html.twig │ ├── edit-book-form.html.twig │ └── list-book.html.twig └── Core/ └── src/ └── Book/ └── src/ ├──Entity/ │ └──Book.php ├──Repository/ │ └──BookRepository.php └── ConfigProvider.php src/Book/src/Handler/GetCreateBookFormHandler.php – handler that reflects the GET action for the CreateBookForm class src/Book/src/Handler/GetDeleteBookFormHandler.php – handler that reflects the GET action for the DeleteBookForm class src/Book/src/Handler/GetEditBookFormHandler.php – handler that reflects the GET action for the EditBookForm class src/Book/src/Handler/GetListBookHandler.php – handler that reflects the GET action for a configurable list of Book entities src/Book/src/Handler/PostCreateBookHandler.php – handler that reflects the POST action for creating a Book entity src/Book/src/Handler/PostDeleteBookHandler.php – handler that reflects the POST action for deleting a Book entity src/Book/src/Handler/PostEditBookHandler.php – handler that reflects the POST action for editing a Book entity src/Book/src/InputFilter/Input/* – input filters and validator configurations src/Book/src/InputFilter/CreateBookInputFilter.php – input filters and validators src/Book/src/InputFilter/EditBookInputFilter.php – input filters and validators src/Book/src/InputFilter/DeleteBookInputFilter.php – input filters and validators src/Book/src/Service/BookService.php – is a class or component responsible for performing a specific task or providing functionality to other parts of the application src/Book/src/Service/BookServiceInterface.php – interface that reflects the publicly available methods in BookService src/Book/src/ConfigProvider.php – is a class that provides configuration for various aspects of the framework or application src/Book/src/RoutesDelegator.php – a routes delegator is a delegator factory responsible for configuring routing middleware based on routing configuration provided by the application src/Book/templates/book/create-book-form.html.twig – a Twig template for generating the view for the CreateBookForm class src/Book/templates/book/delete-book-form.html.twig – a Twig template for generating the view for the DeleteBookForm class src/Book/templates/book/edit-book-form.html.twig – a Twig template for generating the view for the EditBookForm class src/Book/templates/book/list-book.html.twig – a Twig template for generating the view for the list of Book entities src/Core/src/Book/src/Entity/Book.php – an entity refers to a PHP class that represents a persistent object or data structure src/Core/src/Book/src/Repository/BookRepository.php – a repository is a class responsible for querying and retrieving entities from the database src/Core/src/Book/src/ConfigProvider.php – is a class that provides configuration for Doctrine ORM Note that while this tutorial covers a standalone case, the Core module generated by default has the same structure as the one described in the Dotkernel API \"Book\" module allowing use as part of the Dotkernel Headless Platform","title":"Folder and files structure"},{"location":"v6/tutorials/create-book-module-via-dot-maker/#file-creation-and-contents","text":"After successfully installing dot-maker , it can be used to generate the Book module. Invoke dot-maker by executing ./vendor/bin/dot-maker or via the optional script described in the documentation - composer make . This will list all component types that can be created - for the purposes of this tutorial, enter module : ./vendor/bin/dot-maker module Type book when prompted to enter the module name. Next you will be prompted to add the relevant components of a module, accepting y(es) , n(o) and Enter (defaults to yes ): Note that dot-maker will automatically split the files into the described Api and Core structure without a further input needed. Entity and repository (Y): will generate the Book.php entity and the associated BookRepository.php . Service and service interface (Y): will generate the BookService and the BookServiceInterface . Command , followed by middleware (N): not necessary for the module described in this tutorial. Handler (Y): this option is needed, and will further prompt you for the required actions. Allow listing Books? (Y): this will generate the GetListBookHandler.php class and the list-book.html.twig . Allow viewing Books? (N): not necessary for the module described in this tutorial. Allow creating Books? (Y): will generate all files used for creating Book entities, as follows: The form used for creation CreateBookForm as well as the input filter it uses CreateBookInputFilter The handler that fetches the form GetCreateBookFormHandler The handler for the POST action PostCreateBookHandler The template file used for the form create-book-form.html.twig Allow deleting Books? (Y): similar to the previous step, this step will generate multiple files: The form used for creation DeleteBookForm , the input filter it uses DeleteBookInputFilter as well as a singular Input class it uses - ConfirmDeleteBookInput The handler that fetches the form GetDeleteBookFormHandler The handler for the POST action PostDeleteBookHandler The template file used for the form delete-book-form.html.twig Allow editing Books? (Y): as the previous two cases, multiple files are generated on this step as well: The form used for creation EditBookForm and the input filter it uses EditBookInputFilter The handler that fetches the form GetEditBookFormHandler The handler for the POST action PostEditBookHandler The template file used for the form edit-book-form.html.twig Following this step, dot-maker will automatically generate the ConfigProvider.php classes for both the Admin and Core namespaces, as well as the RoutesDelegator class containing all the relevant routes. You will then be instructed to: Register the ConfigProvider classes by adding Admin\\Book\\ConfigProvider::class and Core\\Book\\ConfigProvider::class to config/config.php Register the new Book namespace by adding \"Admin\\\\Book\\\\\": \"src/Book/src/\" and \"Core\\\\Book\\\\\": \"src/Core/src/Book/src/\" to composer.json under the autoload.psr-4 key. After registering the namespace, run the following command to regenerate the autoloaded files, as notified by dot-maker : composer dump dot-maker will by default prompt you to generate the migrations for the new entity, but for the purpose of this tutorial we will run this after updating the generated entity. The next step is filling in the required logic for the proposed flow of this module. While dot-maker does also include common logic in the relevant files, the tutorial adds custom functionality. As such, the following section will go over the files that require changes. src/Book/src/Handler/GetListBookHandler.php The overall class structure is fully generated, but for the purpose of this tutorial you will need to send the indentifier key to the template, as shown below: return new HtmlResponse( $this-&gt;template-&gt;render('book::book-list', [ 'pagination' =&gt; $this-&gt;bookService-&gt;getBooks($request-&gt;getQueryParams()), 'identifier' =&gt; SettingIdentifierEnum::IdentifierTableUserListSelectedColumns-&gt;value, ]) ); src/Core/src/App/src/Message.php The generated PostCreateBookHandler , PostEditBookHandler and PostDeleteBookHandler classes will by default make use of the Message::BOOK_CREATED , Message::BOOK_UPDATED and Message::BOOK_DELETED constants which you will have to manually add: public const BOOK_CREATED = 'Book created successfully.'; public const BOOK_UPDATED = 'Book updated successfully.'; public const BOOK_DELETED = 'Book deleted successfully.'; src/Core/src/Book/src/Entity/Book.php To keep things simple in this tutorial, our book will have three properties: name , author and releaseDate . Add the three properties and their getters and setters, while making sure to update the generated constructor method. &lt;?php declare(strict_types=1); namespace Core\\Book\\Entity; use Core\\App\\Entity\\AbstractEntity; use Core\\App\\Entity\\TimestampsTrait; use Core\\Book\\Repository\\BookRepository; use DateTimeImmutable; use Doctrine\\ORM\\Mapping as ORM; #[ORM\\Entity(repositoryClass: BookRepository::class)] #[ORM\\Table(\"book\")] #[ORM\\HasLifecycleCallbacks] class Book extends AbstractEntity { use TimestampsTrait; #[ORM\\Column(name: \"name\", type: \"string\", length: 100)] protected string $name; #[ORM\\Column(name: \"author\", type: \"string\", length: 100)] protected string $author; #[ORM\\Column(name: \"releaseDate\", type: \"datetime_immutable\")] protected DateTimeImmutable $releaseDate; public function __construct(string $name, string $author, DateTimeImmutable $releaseDate) { parent::__construct(); $this-&gt;setName($name); $this-&gt;setAuthor($author); $this-&gt;setReleaseDate($releaseDate); } public function getName(): string { return $this-&gt;name; } public function setName(string $name): self { $this-&gt;name = $name; return $this; } public function getAuthor(): string { return $this-&gt;author; } public function setAuthor(string $author): self { $this-&gt;author = $author; return $this; } public function getReleaseDate(): DateTimeImmutable { return $this-&gt;releaseDate; } public function setReleaseDate(DateTimeImmutable $releaseDate): self { $this-&gt;releaseDate = $releaseDate; return $this; } public function getArrayCopy(): array { return [ 'uuid' =&gt; $this-&gt;getUuid()-&gt;toString(), 'name' =&gt; $this-&gt;getName(), 'author' =&gt; $this-&gt;getAuthor(), 'releaseDate' =&gt; $this-&gt;getReleaseDate(), ]; } } The BookService class will require minor modifications for the getBooks() and saveBook() methods, to add the custom properties added in the previous step. The class should look like the following after updating the methods. src/Book/src/Service/BookService.php &lt;?php declare(strict_types=1); namespace Admin\\Book\\Service; use Admin\\App\\Exception\\NotFoundException; use Core\\App\\Helper\\Paginator; use Core\\App\\Message; use Core\\Book\\Entity\\Book; use Core\\Book\\Repository\\BookRepository; use DateTimeImmutable; use Doctrine\\ORM\\Tools\\Pagination\\Paginator as DoctrinePaginator; use Dot\\DependencyInjection\\Attribute\\Inject; use function array_key_exists; use function in_array; class BookService implements BookServiceInterface { #[Inject( BookRepository::class, )] public function __construct( protected BookRepository $bookRepository, ) { } public function getBookRepository(): BookRepository { return $this-&gt;bookRepository; } public function deleteBook( Book $book, ): void { $this-&gt;bookRepository-&gt;deleteResource($book); } /** * @param array&lt;non-empty-string, mixed&gt; $params */ public function getBooks( array $params, ): array { $filters = $params['filters'] ?? []; $params = Paginator::getParams($params, 'book.created'); $sortableColumns = [ 'book.name', 'book.author', 'book.releaseDate', 'book.created', 'book.updated', ]; if (! in_array($params['sort'], $sortableColumns, true)) { $params['sort'] = 'book.created'; } $paginator = new DoctrinePaginator($this-&gt;bookRepository-&gt;getBooks($params, $filters)-&gt;getQuery()); return Paginator::wrapper($paginator, $params, $filters); } /** * @param array&lt;non-empty-string, mixed&gt; $data * @throws \\DateMalformedStringException */ public function saveBook( array $data, ?Book $book = null, ): Book { if (! $book instanceof Book) { $book = new Book( $data['name'], $data['author'], new DateTimeImmutable($data['releaseDate']) ); } else { if (array_key_exists('name', $data) &amp;&amp; $data['name'] !== null) { $book-&gt;setName($data['name']); } if (array_key_exists('author', $data) &amp;&amp; $data['author'] !== null) { $book-&gt;setAuthor($data['author']); } if (array_key_exists('releaseDate', $data) &amp;&amp; $data['releaseDate'] !== null) { $book-&gt;setReleaseDate(new DateTimeImmutable($data['releaseDate'])); } } $this-&gt;bookRepository-&gt;saveResource($book); return $book; } /** * @throws NotFoundException */ public function findBook( string $uuid, ): Book { $book = $this-&gt;bookRepository-&gt;find($uuid); if (! $book instanceof Book) { throw new NotFoundException(Message::resourceNotFound('Book')); } return $book; } } When creating a book, we will need some validators, so we will create a form and the input filter that will be used to validate the data received in the request. src/Book/src/Form/CreateBookForm.php The default Csrf and Submit Inputs will be automatically added to the CreateBookForm.php class that dot-maker will create for you. For this tutorial, you will have to add the custom inputs, by copying the following code in the init function of CreateBookForm : $this-&gt;add( (new Text('name')) -&gt;setLabel('Name') -&gt;setAttribute('required', true) )-&gt;add( (new Text('author')) -&gt;setLabel('Author') -&gt;setAttribute('required', true) )-&gt;add( (new Date('releaseDate')) -&gt;setLabel('Release Date') -&gt;setAttribute('required', true) ); src/Book/src/Form/EditBookForm.php A similar sequence is used for the init function of EditBookForm , with the required attributes removed, as leaving the inputs empty is allowed for keeping the original data: $this-&gt;add( (new Text('name')) -&gt;setLabel('Name') )-&gt;add( (new Text('author')) -&gt;setLabel('Author') )-&gt;add( (new Date('releaseDate')) -&gt;setLabel('Release Date') ); By creating a module with dot-maker , separate inputs will not be created. However, you can still generate them as using these steps: Run the following to start adding Input classes: ./vendor/bin/dot-maker input When prompted, enter the names Author , Name and ReleaseDate one by one to generate the classes. The resulting AuthorInput.php , NameInput.php and ReleaseDateInput.php classes require no further changes for the tutorial use case. The module creation process has generated the parent input filters CreateBookInputFilter.php and EditBookInputFilter.php containing only the default CsrfInput . Now we add all the inputs together in the parent input filters' init functions, as below: src/Book/src/InputFilter/CreateBookInputFilter.php and src/Book/src/InputFilter/EditBookInputFilter.php $this-&gt;add(new NameInput('name')) -&gt;add(new AuthorInput('author')) -&gt;add(new ReleaseDateInput('releaseDate')); We create separate Input files to demonstrate their reusability and obtain a clean InputFilter s, but you could have all the inputs created directly in the InputFilter like this: Note that dot-maker will not generate inputs in the init method, so the following are to be added by hand before the default CsrfInput , if going for this approach. CreateBookInputFilter $nameInput = new Input('name'); $nameInput-&gt;setRequired(true); $nameInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $nameInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($nameInput); $authorInput = new Input('author'); $authorInput-&gt;setRequired(true); $authorInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $authorInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($authorInput); $releaseDateInput = new Input('releaseDate'); $releaseDateInput-&gt;setRequired(true); $releaseDateInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $releaseDateInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($releaseDateInput); EditBookInputFilter $nameInput = new Input('name'); $nameInput-&gt;setRequired(false); $nameInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $nameInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($nameInput); $authorInput = new Input('author'); $authorInput-&gt;setRequired(false); $authorInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $authorInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($authorInput); $releaseDateInput = new Input('releaseDate'); $releaseDateInput-&gt;setRequired(false); $releaseDateInput-&gt;getFilterChain() -&gt;attachByName(StringTrim::class) -&gt;attachByName(StripTags::class); $releaseDateInput-&gt;getValidatorChain() -&gt;attachByName(NotEmpty::class, [ 'message' =&gt; Message::VALIDATOR_REQUIRED_FIELD, ], true); $this-&gt;add($releaseDateInput); src/App/assets/js/components/_book.js As the listing pages make use of JavaScript, you will need to manually create your module specific _book.js file and register it in webpack.config.js for building. You may copy this sample _book.js file to the src/App/assets/js/components/ directory: $(document).ready(() =&gt; { const request = async(url, options = {}) =&gt; { try { const response = await fetch(url, options); const body = await response.text(); if (! response.ok) { throw { data: body, } } return body; } catch (error) { throw { data: error.data, } } } $(\"#add-book-modal\").on('show.bs.modal', function () { const modal = $(this); request(modal.data('add-url'), { method: 'GET' }).then(data =&gt; { modal.find('.modal-dialog').html(data); }).catch(error =&gt; { console.error(error); location.reload(); }); }).on('hidden.bs.modal', function () { const modal = $(this); modal.find('.modal-dialog').find('.modal-body').html('Loading...'); }); $(\"#edit-book-modal\").on('show.bs.modal', function () { const selectedElement = $('.ui-checkbox:checked'); if (selectedElement.length !== 1) { return; } const modal = $(this); request(selectedElement.data('edit-url'), { method: 'GET' }).then(data =&gt; { modal.find('.modal-dialog').html(data); }).catch(error =&gt; { console.error(error); location.reload(); }); }).on('hidden.bs.modal', function () { const modal = $(this); modal.find('.modal-dialog').find('.modal-body').html('Loading...'); }); $(\"#delete-book-modal\").on('show.bs.modal', function () { const selectedElement = $('.ui-checkbox:checked'); if (selectedElement.length !== 1) { return; } const modal = $(this); request(selectedElement.data('delete-url'), { method: 'GET' }).then(data =&gt; { modal.find('.modal-dialog').html(data); }).catch(error =&gt; { console.error(error); location.reload(); }); }).on('hidden.bs.modal', function () { const modal = $(this); modal.find('.modal-dialog').find('.modal-body').html('Loading...'); }); $(document).on(\"submit\", \"#book-form\", (event) =&gt; { event.preventDefault(); const form = event.target; if (! form.checkValidity()) { event.stopPropagation(); form.classList.add('was-validated'); return; } const modal = $(form.closest('.modal')); request(form.getAttribute('action'), { method: 'POST', body: new FormData(form), }).then(() =&gt; { location.reload(); }).catch(error =&gt; { modal.find('.modal-dialog').html(error.data); }); }); $(document).on(\"submit\", \"#delete-book-form\", (event) =&gt; { event.preventDefault(); const form = event.target; if (! form.checkValidity()) { event.stopPropagation(); form.classList.add('was-validated'); return; } const modal = $(form.closest('.modal')); request(form.getAttribute('action'), { method: 'POST', body: new FormData(form), }).then(() =&gt; { location.reload(); }).catch(error =&gt; { modal.find('.modal-dialog').html(error.data); }); }); }); Next you have to register the file in the entries array of webpack.config.js by adding the following key: book: [ './App/assets/js/components/_book.js' ] To make use of the newly added scripts, make sure to build your assets by running the command: npm run prod src/Book/templates/book/* The next step is creating the page structures in the .twig files dot-maker automatically generated for you. For this tutorial you may copy the following default page layout in the list-book.html.twig : {% from '@partial/macros.html.twig' import sortableColumn %} {% extends '@layout/default.html.twig' %} {% block title %}Manage books{% endblock %} {% block content %} &lt;div class=\"container-fluid\"&gt; &lt;h4 class=\"c-grey-900 mT-10 mB-30\"&gt;Manage books&lt;/h4&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;div class=\"bgc-white bd bdrs-3 pL-10 pR-20 pT-20 pB-3 mB-20\"&gt; &lt;form class=\"row g-3\" method=\"get\" action=\"{{ path('book::list-book') }}\"&gt; &lt;input type=\"hidden\" name=\"offset\" value=\"0\" /&gt; &lt;input type=\"hidden\" name=\"limit\" value=\"{{ pagination.limit }}\" /&gt; &lt;input type=\"hidden\" name=\"sort\" value=\"{{ pagination.sort }}\" /&gt; &lt;input type=\"hidden\" name=\"order\" value=\"{{ pagination.dir }}\" /&gt; &lt;div class=\"col-sm-auto btn-group-sm\"&gt; &lt;button type=\"button\" class=\"btn btn-default btn-sm\" id=\"btn-add-resource\" data-bs-toggle=\"modal\" data-bs-target=\"#add-book-modal\"&gt; &lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-default btn-sm\" id=\"btn-edit-resource\" data-bs-toggle=\"modal\" data-bs-target=\"#edit-book-modal\" disabled&gt; &lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-default btn-sm\" id=\"btn-delete-resource\" data-bs-toggle=\"modal\" data-bs-target=\"#delete-book-modal\" disabled&gt; &lt;i class=\"fa fa-trash-o\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;div class=\"col-sm-auto ms-auto\"&gt; &lt;div class=\"dropdown\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-custom-class=\"custom-tooltip\" data-bs-title=\"Toggle columns\"&gt; &lt;button class=\"btn btn-light btn-sm dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt; &lt;i class=\"fa fa-columns\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;ul class=\"dropdown-menu\" id=\"column-selector\"&gt;&lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-12\"&gt; &lt;div class=\"table-responsive\"&gt; &lt;table id=\"book-table\" class=\"table table-bordered table-hover table-striped table-light\" style=\"display: none;\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class=\"column-book-uuid\"&gt;&lt;/th&gt; &lt;th class=\"column-book-name\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.name', 'Name') }} &lt;/th&gt; &lt;th class=\"column-book-author\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.author', 'Author') }} &lt;/th&gt; &lt;th class=\"column-book-release-date\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.release-date', 'Release Date') }} &lt;/th&gt; &lt;th class=\"column-book-created\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.created', 'Created') }} &lt;/th&gt; &lt;th class=\"column-book-updated\"&gt; {{ sortableColumn('book::list-book', {}, pagination.queryParams, 'book.updated', 'Updated') }} &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; {% for book in pagination.items %} &lt;tr class=\"table-row\"&gt; &lt;td class=\"column-book-uuid\" style=\"width: 1vw;\"&gt; &lt;label&gt; &lt;input type=\"checkbox\" class=\"checkbox ui-checkbox\" value=\"{{ book.uuid }}\" data-edit-url=\"{{ path('book::edit-book', {uuid: book.uuid}) }}\" data-delete-url=\"{{ path('book::delete-book', {uuid: book.uuid}) }}\" &gt; &lt;/label&gt; &lt;/td&gt; &lt;td class=\"column-book-name\"&gt;{{ book.name }}&lt;/td&gt; &lt;td class=\"column-book-author\"&gt;{{ book.author }}&lt;/td&gt; &lt;td class=\"column-book-release-date\"&gt;{{ book.releaseDate|date('Y-m-d') }}&lt;/td&gt; &lt;td class=\"column-book-created\"&gt;{{ book.getCreated()|date('Y-m-d H:i:s') }}&lt;/td&gt; &lt;td class=\"column-book-updated\"&gt;{{ book.getUpdated() is not null ? book.getUpdated()|date('Y-m-d H:i:s') : '' }}&lt;/td&gt; &lt;/tr&gt; {% endfor %} &lt;/tbody&gt; &lt;/table&gt; {% if pagination.isOutOfBounds %} &lt;div class=\"alert alert-warning text-center text-black fw-bold\" role=\"alert\"&gt; Out of bounds! Return to &lt;a href=\"{{ path('book::list-book', {}, pagination.queryParams|merge({offset: pagination.lastOffset})) }}\"&gt;page {{ pagination.lastPage }}&lt;/a&gt; &lt;/div&gt; {% endif %} &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-12\"&gt; &lt;div class=\"bgc-white bd bdrs-3 p-20 mB-20\"&gt; {{ include('@partial/pagination.html.twig', {pagination: pagination, path: 'book::list-book'}, false) }} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal fade\" id=\"add-book-modal\" tabindex=\"-1\" aria-labelledby=\"add-book-modal-content\" aria-hidden=\"true\" data-add-url=\"{{ path('book::create-book') }}\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"add-book-modal-content\"&gt;Create book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt;Loading...&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal fade\" id=\"edit-book-modal\" tabindex=\"-1\" aria-labelledby=\"edit-book-modal-content\" aria-hidden=\"true\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"edit-book-modal-content\"&gt;Edit book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt;Loading...&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal fade\" id=\"delete-book-modal\" tabindex=\"-1\" aria-labelledby=\"delete-book-modal-content\" aria-hidden=\"true\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"delete-book-modal-content\"&gt;Delete book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt;Loading...&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {% endblock %} {% block javascript %} {{ parent() }} &lt;script&gt; const tableId = '#book-table'; const storeSettingsUrl = '{{ path('setting::store-setting', {identifier: identifier}) }}'; const getSettingsUrl = '{{ path('setting::view-setting', {identifier: identifier}) }}'; &lt;/script&gt; &lt;script src=\"{{ asset('js/table_settings.js') }}\" defer&gt;&lt;/script&gt; &lt;script src=\"{{ asset('js/book.js') }}\" defer&gt;&lt;/script&gt; {% endblock %} To add books, a modal must be generated based on the CreateBookForm.php class. You may copy the following structure in create-book-form.html.twig : {% from '@partial/macros.html.twig' import inputElement, submitElement %} &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"add-book-modal-content\"&gt;Create book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close btn-sm\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; {{ form().openTag(form)|raw }} {% set fieldsets = form.getFieldsets() %} {{ inputElement(form.get('name')) }} {{ inputElement(form.get('author')) }} {{ inputElement(form.get('releaseDate')) }} {{ inputElement(form.get('createBookCsrf')) }} {{ submitElement(form.get('submit')) }} {{ form().closeTag()|raw }} {% if messages is defined and messages is iterable %} {% for type, message in messages %} &lt;div class=\"mt-3 alert alert-{% if type == 'success' %}success{% elseif type == 'warning' %}warning{% else %}danger{% endif %}\" role=\"alert\"&gt;{{ message }}&lt;/div&gt; {% endfor %} {% endif %} &lt;/div&gt; &lt;/div&gt; For the \"edit\" action, use the following modal in the edit-book-form.html.twig : {% from '@partial/macros.html.twig' import inputElement, submitElement %} &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"edit-book-modal-content\"&gt;Edit book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close btn-sm\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; {{ form().openTag(form)|raw }} {% set fieldsets = form.getFieldsets() %} {{ inputElement(form.get('name')) }} {{ inputElement(form.get('author')) }} {{ inputElement(form.get('releaseDate')) }} {{ inputElement(form.get('editBookCsrf')) }} {{ submitElement(form.get('submit')) }} {{ form().closeTag()|raw }} {% if messages is defined and messages is iterable %} {% for type, message in messages %} &lt;div class=\"mt-3 alert alert-{% if type == 'success' %}success{% elseif type == 'warning' %}warning{% else %}danger{% endif %}\" role=\"alert\"&gt;{{ message }}&lt;/div&gt; {% endfor %} {% endif %} &lt;/div&gt; &lt;/div&gt; Add the following structure to the delete-book-form.html.twig file: &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h5 class=\"modal-title\" id=\"delete-book-modal-content\"&gt;Delete book&lt;/h5&gt; &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; {{ form().openTag(form)|raw }} &lt;div class=\"row\"&gt;book &lt;div class=\"col-md-12\"&gt; &lt;p&gt;Are you sure you want to delete the following book: &lt;span id=\"book\" class=\"fw-bold\"&gt;{{ book.name }} by {{ book.author }}&lt;/span&gt; ?&lt;/p&gt; &lt;div class=\"form-check\"&gt; {{ formElement(form.get('confirmation')) }} &lt;label class=\"form-check-label\" for=\"confirmation\"&gt;Yes, I want to delete &lt;span class=\"fw-bold\"&gt;{{ book.name }} by {{ book.author }}&lt;/span&gt;&lt;/label&gt; &lt;/div&gt; &lt;div class=\"d-flex justify-content-end\"&gt; {{ formElement(form.get('submit')) }} {{ formElement(form.get('deleteBookCsrf')) }} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {{ form().closeTag()|raw }} &lt;/div&gt; &lt;/div&gt; /config/autoload/navigation.global.php Lastly, link the new module to the admin side-menu by adding the following array to navigation.global.php , under the dot_navigation.containers.main_menu.options.items key: [ 'options' =&gt; [ 'label' =&gt; 'Book', 'route' =&gt; [ 'route_name' =&gt; 'book::list-book', ], 'icon' =&gt; 'c-blue-500 fa fa-book', ], ],","title":"File creation and contents"},{"location":"v6/tutorials/create-book-module-via-dot-maker/#migrations","text":"All changes are done, so at this point the migration file can be generated to create the associated table for the Book entity. You can check the mapping files by running: php ./bin/doctrine orm:validate-schema Generate the migration files by running: php ./vendor/bin/doctrine-migrations diff This will check for differences between your entities and database structure and create migration files if necessary, in src/Core/src/App/src/Migration . To execute the migrations run: php ./vendor/bin/doctrine-migrations migrate","title":"Migrations"},{"location":"v6/tutorials/create-book-module-via-dot-maker/#update-the-authorization-file","text":"We need to configure access to the newly created endpoints. Open config/autoload/authorization-guards.global.php and append the below routes to the guards.options.rules key: 'book::create-book-form' =&gt; ['authenticated'], 'book::create-book' =&gt; ['authenticated'], 'book::list-book' =&gt; ['authenticated'], Make sure you read and understand the rbac documentation .","title":"Update the authorization file"},{"location":"v6/tutorials/create-book-module-via-dot-maker/#checking-routes","text":"The module should now be accessible via the Book section of the Admin main menu, linking to the newly created /list-book route. New book entities can be added via the new \"Create book\" modal accessible form the + button on the management page. Once selected with the checkbox, existing entries can be edited via the - button , or deleted via the \"trash\" icon.","title":"Checking routes"}]}