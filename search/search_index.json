{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"#readmemd","text":"","title":"../../README.md"},{"location":"v5/core-features/csrf/","text":"CSRF protection in forms A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error. Implement CSRF protection Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper Create field Open the form's PHP class and append the following code to the method that initializes the fields (usually init ): $this-&gt;add(new \\Laminas\\Form\\Element\\Csrf('exampleCsrf', [ 'csrf_options' =&gt; [ 'timeout' =&gt; 3600, 'session' =&gt; new \\Laminas\\Session\\Container(), ], ])); where exampleCsrf should be a suggestive name that describes the purpose of the field (example: forgotPasswordCsrf ). Validate field Open the InputFilter that validates the form fields and append the following code to the method that initializes the fields (usually init ): $csrf = new \\Laminas\\InputFilter\\Input('exampleCsrf'); $csrf-&gt;setRequired(true); $csrf-&gt;getFilterChain() -&gt;attachByName(\\Laminas\\Filter\\StringTrim::class) -&gt;attachByName(\\Laminas\\Filter\\StripTags::class); $csrf-&gt;getValidatorChain() -&gt;attachByName(\\Laminas\\Validator\\NotEmpty::class, [ 'message' =&gt; '&lt;b&gt;CSRF&lt;/b&gt; is required and cannot be empty', ], true) -&gt;attachByName(\\Laminas\\Session\\Validator\\Csrf::class, [ 'name' =&gt; 'exampleCsrf', 'message' =&gt; '&lt;b&gt;CSRF&lt;/b&gt; is invalid', 'session' =&gt; new \\Laminas\\Session\\Container(), ], true); $this-&gt;add($csrf); where exampleCsrf must match the CSRF field's name in the form. Don't forget to modify both occurrences in this file. Make sure that you validate the form using its isValid method in the handler/controller where it is submitted. Render field Open the template that renders your form and add the following code somewhere between the form's opening and closing tags: {{ formElement(form.get('exampleCsrf')) }} Test the implementation Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: CSRF is required and cannot be empty Timeout Note the timeout option in your PHP form's exampleCsrf field, with its default value set to 3600 . This represents the value in seconds for how long the token is valid. Submitting a form that has been rendered for longer than this value will result in a validation error: CSRF is invalid You can modify the value of timeout in each form, but the default value should work in most cases.","title":"CSRF"},{"location":"v5/core-features/csrf/#csrf-protection-in-forms","text":"A Cross-Site Request Forgery (CSRF) attack is a type of security vulnerability that tricks a user into performing actions on a web application in which they are authenticated, without their knowledge or consent. Web applications can protect users against these types of attacks by implementing CSRF tokens in their forms which are known only to the application that generated them and must be included when submitting forms. With each visit, a new CSRF token is added to the form so tokens are not reusable between forms. Missing to provide a valid CSRF token will result in a form validation error.","title":"CSRF protection in forms"},{"location":"v5/core-features/csrf/#implement-csrf-protection","text":"Implementing CSRF protection requires three steps: create new field using laminas/laminas-form 's CSRF element validate new field using laminas/laminas-session 's CSRF validator render field using laminas/laminas-form 's FormElement helper","title":"Implement CSRF protection"},{"location":"v5/core-features/csrf/#test-the-implementation","text":"Access your form from the browser and view its source. You should see a new hidden field, called exampleCsrf (or however you named it). After filling out the form, submitting it should work as before. In order to make sure that the new CSRF field works as expected, you can inspect the form using your browser's Developer tools and modify its value in any way. Submitting a filled out form should result in a validation error: CSRF is required and cannot be empty","title":"Test the implementation"},{"location":"v5/installation/composer/","text":"Composer Installation of Packages Install dependencies composer install Development mode If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Composer"},{"location":"v5/installation/composer/#composer-installation-of-packages","text":"","title":"Composer Installation of Packages"},{"location":"v5/installation/composer/#install-dependencies","text":"composer install","title":"Install dependencies"},{"location":"v5/installation/composer/#development-mode","text":"If you're installing the project for development, make sure you have development mode enabled, by running: composer development-enable You can disable development mode by running: composer development-disable You can check if you have development mode enabled by running: composer development-status","title":"Development mode"},{"location":"v5/installation/configuration-files/","text":"Configuration Files Prepare config files duplicate config/autoload/local.php.dist as config/autoload/local.php duplicate config/autoload/mail.local.php.dist as config/autoload/mail.local.php Note if your Admin will send emails, make sure to fill in SMTP connection params optional : in order to run/create tests, duplicate config/autoload/local.test.php.dist as config/autoload/local.test.php Note this creates a new in-memory database that your tests will run on.","title":"Configuration Files"},{"location":"v5/installation/configuration-files/#configuration-files","text":"","title":"Configuration Files"},{"location":"v5/installation/configuration-files/#prepare-config-files","text":"duplicate config/autoload/local.php.dist as config/autoload/local.php duplicate config/autoload/mail.local.php.dist as config/autoload/mail.local.php","title":"Prepare config files"},{"location":"v5/installation/doctrine-orm/","text":"Doctrine ORM Setup database Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Create a new MySQL database - set collation to utf8mb4_general_ci Running migrations Run the database migrations by using the following command: php bin/doctrine-migrations migrate This command will prompt you to confirm that you want to run it. WARNING! You are about to execute a migration in database \"...\" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) [yes]: Hit Enter to confirm the operation. Executing fixtures Fixtures are used to seed the database with initial values and should be executed after migrating the database. To list all the fixtures, run: php bin/doctrine fixtures:list This will output all the fixtures in the order of execution. To execute all fixtures, run: php bin/doctrine fixtures:execute To execute a specific fixture, run: php bin/doctrine fixtures:execute --class=FixtureClassName More details on how fixtures work can be found here: https://github.com/dotkernel/dot-data-fixtures#creating-fixtures","title":"Doctrine ORM"},{"location":"v5/installation/doctrine-orm/#doctrine-orm","text":"","title":"Doctrine ORM"},{"location":"v5/installation/doctrine-orm/#setup-database","text":"Make sure you fill out the database credentials in config/autoload/local.php under $databases['default'] . Create a new MySQL database - set collation to utf8mb4_general_ci","title":"Setup database"},{"location":"v5/installation/doctrine-orm/#running-migrations","text":"Run the database migrations by using the following command: php bin/doctrine-migrations migrate This command will prompt you to confirm that you want to run it. WARNING! You are about to execute a migration in database \"...\" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) [yes]: Hit Enter to confirm the operation.","title":"Running migrations"},{"location":"v5/installation/doctrine-orm/#executing-fixtures","text":"Fixtures are used to seed the database with initial values and should be executed after migrating the database. To list all the fixtures, run: php bin/doctrine fixtures:list This will output all the fixtures in the order of execution. To execute all fixtures, run: php bin/doctrine fixtures:execute To execute a specific fixture, run: php bin/doctrine fixtures:execute --class=FixtureClassName More details on how fixtures work can be found here: https://github.com/dotkernel/dot-data-fixtures#creating-fixtures","title":"Executing fixtures"},{"location":"v5/installation/getting-started/","text":"Clone the project Recommended development environment If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WLS2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/admin.git .","title":"Getting Started"},{"location":"v5/installation/getting-started/#clone-the-project","text":"","title":"Clone the project"},{"location":"v5/installation/getting-started/#recommended-development-environment","text":"If you are using Windows as OS on your machine, you can use WSL2 as development environment. Read more here: PHP-Mariadb-on-WLS2 Using your terminal, navigate inside the directory you want to download the project files into. Make sure that the directory is empty before proceeding to the download process. Once there, run the following command: git clone https://github.com/dotkernel/admin.git .","title":"Recommended development environment"},{"location":"v5/installation/manage-geolite2/","text":"Manage GeoLite2 database You can download/update a specific GeoLite2 database, by running the following command: php bin/cli.php geoip:synchronize -d {DATABASE} Where {DATABASE} takes one of the following values: asn , city , country . You can download/update all GeoLite2 databases at once, by running the following command: php bin/cli.php geoip:synchronize The output should be similar to the below, displaying per row: database identifier : previous build datetime -&gt; current build datetime . asn: n/a -&gt; 2021-07-01 02:09:34 city: n/a -&gt; 2021-07-01 02:09:20 country: n/a -&gt; 2021-07-01 02:05:12 Get help for this command by running: php bin/cli.php help geoip:synchronize Tip : If you setup the synchronizer command as a cronjob, you can add the -q|--quiet option, and it will output data only if an error has occurred.","title":"Manage Geolite2"},{"location":"v5/installation/manage-geolite2/#manage-geolite2-database","text":"You can download/update a specific GeoLite2 database, by running the following command: php bin/cli.php geoip:synchronize -d {DATABASE} Where {DATABASE} takes one of the following values: asn , city , country . You can download/update all GeoLite2 databases at once, by running the following command: php bin/cli.php geoip:synchronize The output should be similar to the below, displaying per row: database identifier : previous build datetime -&gt; current build datetime . asn: n/a -&gt; 2021-07-01 02:09:34 city: n/a -&gt; 2021-07-01 02:09:20 country: n/a -&gt; 2021-07-01 02:05:12 Get help for this command by running: php bin/cli.php help geoip:synchronize Tip : If you setup the synchronizer command as a cronjob, you can add the -q|--quiet option, and it will output data only if an error has occurred.","title":"Manage GeoLite2 database"},{"location":"v5/installation/test-the-installation/","text":"Testing (Running) Note: Do not enable dev mode in production Run the following command in your project's directory to start PHPs built-in server: php -S 0.0.0.0:8080 -t public Running command composer serve will do the exact same, but the above is faster. 0.0.0.0 means that the server is open to all incoming connections 127.0.0.1 means that the server can only be accessed locally (localhost only) 8080 the port on which the server is started (the listening port for the server) NOTE: If you are still getting exceptions or errors regarding some missing services, try running the following command php bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php Open a web browser and visit http://localhost:8080/ You should see the DotKernel admin login page. If you ran the migrations you will have an admin user in the database with the following credentials: User : admin Password : dotadmin NOTE: Production only : Make sure you modify the default admin credentials. Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: return [ 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ] ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Test the Installation"},{"location":"v5/installation/test-the-installation/#testing-running","text":"Note: Do not enable dev mode in production Run the following command in your project's directory to start PHPs built-in server: php -S 0.0.0.0:8080 -t public Running command composer serve will do the exact same, but the above is faster. 0.0.0.0 means that the server is open to all incoming connections 127.0.0.1 means that the server can only be accessed locally (localhost only) 8080 the port on which the server is started (the listening port for the server) NOTE: If you are still getting exceptions or errors regarding some missing services, try running the following command php bin/clear-config-cache.php If config-cache.php is present that config will be loaded regardless of the ConfigAggregator::ENABLE_CACHE in config/autoload/mezzio.global.php Open a web browser and visit http://localhost:8080/ You should see the DotKernel admin login page. If you ran the migrations you will have an admin user in the database with the following credentials: User : admin Password : dotadmin NOTE: Production only : Make sure you modify the default admin credentials. Development only : session.cookie_secure does not work locally so make sure you modify your local.php , as per the following: return [ 'session_config' =&gt; [ 'cookie_secure' =&gt; false, ] ]; Do not change this in local.php.dist as well because this value should remain true on production.","title":"Testing (Running)"},{"location":"v5/introduction/introduction/","text":"Introduction DotKernel web starter package suitable for admin applications.","title":"Introduction"},{"location":"v5/introduction/introduction/#introduction","text":"DotKernel web starter package suitable for admin applications.","title":"Introduction"},{"location":"v5/introduction/server-requirements/","text":"Server Requirements For production, we highly recommend a *nix based system. Webserver Apache &gt;= 2.2 mod_rewrite .htaccess support (AllowOverride All) The repository includes a default .htaccess file in the public folder. Nginx You need to convert the provided Apache related .htaccess file into Nginx configuration instructions. PHP &gt;= 8.2 Both mod_php and FCGI (FPM) are supported. Required Settings and Modules &amp; Extensions memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH) RDBMS MariaDB &gt;= 10.11 LTS Recommended extensions opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml, etc) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compessing files curl (required if APIs are used) sqlite3 - for tests","title":"Server Requirements"},{"location":"v5/introduction/server-requirements/#server-requirements","text":"For production, we highly recommend a *nix based system.","title":"Server Requirements"},{"location":"v5/introduction/server-requirements/#webserver","text":"","title":"Webserver"},{"location":"v5/introduction/server-requirements/#php-82","text":"Both mod_php and FCGI (FPM) are supported.","title":"PHP &gt;= 8.2"},{"location":"v5/introduction/server-requirements/#required-settings-and-modules-extensions","text":"memory_limit &gt;= 128M upload_max_filesize and post_max_size &gt;= 100M (depending on your data) mbstring CLI SAPI (for Cron Jobs) Composer (added to $PATH)","title":"Required Settings and Modules &amp; Extensions"},{"location":"v5/introduction/server-requirements/#rdbms","text":"MariaDB &gt;= 10.11 LTS","title":"RDBMS"},{"location":"v5/introduction/server-requirements/#recommended-extensions","text":"opcache pdo_mysql or mysqli (if using MySQL or MariaDB as RDBMS) dom - if working with markup files structure (html, xml, etc) simplexml - working with xml files gd, exif - if working with images zlib, zip, bz2 - if compessing files curl (required if APIs are used) sqlite3 - for tests","title":"Recommended extensions"}]}